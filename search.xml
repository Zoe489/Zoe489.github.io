<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[git常用命令]]></title>
      <url>/2017/09/12/git/</url>
      <content type="html"><![CDATA[<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt=""></p>
<h1 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 新建git代码库</span></div><div class="line"><span class="meta">$</span><span class="bash"> git init</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 下载一个项目和它的整个代码历史</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>git的配置文件为<code>.gitconfig</code></p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前的git配置</span></div><div class="line">$ git<span class="built_in"> config </span>--list</div><div class="line"></div><div class="line"><span class="comment"># 设置提交代码时的用户信息</span></div><div class="line">$ git<span class="built_in"> config </span>user.name <span class="string">"[name]"</span></div><div class="line">$ git<span class="built_in"> config </span>user.email <span class="string">"[email address]"</span></div></pre></td></tr></table></figure>
<h1 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 将工作文件修改提交到本地暂存区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add &lt;file&gt;</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 将所有修改过的工作文件提交到暂存区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add .</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 添加每个变化前，都会要求确认</span></div><div class="line"><span class="meta">#</span><span class="bash"> 对于同一个文件的多处变化，可以实现分次提交</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add -p</span></div></pre></td></tr></table></figure>
<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 删除工作区文件，并将这次删除放入暂存区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git rm [file1] [file2]</span></div></pre></td></tr></table></figure>
<h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 提交暂存区到仓库区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m [message]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -a</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 提交时显示所有diff信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -v</span></div></pre></td></tr></table></figure>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 列出所有远程分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 列出所有本地和远程分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></div><div class="line"><span class="meta"></span></div><div class="line"></div><div class="line">#<span class="bash"> 新建一个分支，但依然停留在当前分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个分支，并切换到该分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch][remote-branch]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 切换到指定分支，并更新工作区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 合并指定分支到当前分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 选择一个commit,合并进当前分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 删除分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 删除远程分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></div></pre></td></tr></table></figure>
<h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 显示有变更的文件</span></div><div class="line"><span class="meta">$</span><span class="bash"> git status</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示当前分支的版本历史</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示暂存区和工作区的差异</span></div><div class="line"><span class="meta">$</span><span class="bash"> git diff</span></div></pre></td></tr></table></figure>
<h1 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 下载远程仓库的所有变动</span></div><div class="line">$ git fetch</div><div class="line"></div><div class="line"><span class="section"># 显示所有远程仓库</span></div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"><span class="section"># 增加一个新的远程仓库</span></div><div class="line">$ git remote add [<span class="string">shortname</span>][<span class="symbol">url</span>]</div><div class="line"></div><div class="line"><span class="section"># 取回远程仓库的变化，并与本地分支合并</span></div><div class="line">$git pull [<span class="string">remote</span>][<span class="symbol">branch</span>]</div><div class="line"></div><div class="line"><span class="section"># 上传本地指定分支到远程仓库</span></div><div class="line">$ git push [<span class="string">remote</span>][<span class="symbol">branch</span>]</div><div class="line"></div><div class="line"><span class="section"># 推送所有分支到远程仓库</span></div><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure>
<h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的指定文件到工作区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout [file]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 恢复暂存区的所有文件到工作区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 重置暂存区的指定文件，与上次commit保持一直，但工作区不变</span></div><div class="line"><span class="meta">$</span><span class="bash"> git reset [file]</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js前端面试笔记]]></title>
      <url>/2017/09/12/interviewQuestions/</url>
      <content type="html"><![CDATA[<h1 id="8-31-阿里一轮电话面试"><a href="#8-31-阿里一轮电话面试" class="headerlink" title="8.31 阿里一轮电话面试"></a>8.31 阿里一轮电话面试</h1><h2 id="1-js的基本数据类型"><a href="#1-js的基本数据类型" class="headerlink" title="1. js的基本数据类型"></a>1. js的基本数据类型</h2><p>  检测给定变量的数据类型可用typeof<br>  （1）    Undefined： 只有一个值，就是undefined，在使用var声明变量但未对其加以初始化，这个变量就是undefined。<br>  （2）    Null： 只有一个值，就是null。从逻辑角度来看，null值表示一个空对象指针，使用typeof操作符检测null值会返回object。<br>  （3）    Boolean：true和false<br>  （4）    Number：NAN与任何值都不想等，包括NAN本身。Number(), parseInt(), parseFloat()。<br>  （5）    String：字符串<br>  （6）    Object：js中的对象是一组数据和功能的集合。</p>
<h2 id="2-undefined和null的区别"><a href="#2-undefined和null的区别" class="headerlink" title="2. undefined和null的区别"></a>2. undefined和null的区别</h2><p>  （1）null是一个字面量（而不是全局对象的一个属性,undefined 是）;<br>  （2）null是一个表示”无”的对象, Number(null) == 0；undefined是一个表示”无”的原始值, Number(undefined) == NaN。<br>  （3）当声明的变量还未被初始化时,变量的默认值为undefined。<br>  （4）null用来表示尚未存在的对象,常用来表示函数企图返回一个不存在的对象。</p>
<p>  undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：<br>    （1）变量被声明了，但没有赋值时，就等于undefined。<br>  （2）调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>    （3）函数没有返回值时，默认返回undefined。<br>    （4）对象没有赋值的属性，该属性的值为undefined。<br>  null表示“没有对象”，即该处不应该有值。典型用法是：<br>    （1） 作为函数的参数，表示该函数的参数不是对象。<br>    （2） 作为对象原型链的终点。</p>
<h2 id="3-js的继承-，extends"><a href="#3-js的继承-，extends" class="headerlink" title="3. js的继承 ，extends"></a>3. js的继承 ，extends</h2><p>  （1）原型链继承<br>      定义构造函数，将父类的新实例赋值给子类构造函数的原型对象。<br>  （2）构造函数继承<br>      在子类构造函数的内部调用超类的构造函数，通过call()和apply()方法可以在创建的对象上执行构造函数。（没用到原型）。<br>  （3）组合继承<br>      使用原型链实现对父类属性的继承，使用构造函数来实现对实例属性的继承。<br>  （4）原型式继承<br>  （5）寄生式继承<br>  （6）寄生组合式继承</p>
<p>  ES6中的class的继承<br>    通过extends关键字，继承了父类所有属性和方法。<br>    Super关键字代表父类的构造函数，用来新建父类的this对象。子类必须在constructor方法中调用super方法，否则新建实例会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。<br>    class中含有constructor()构造函数，this代表实例对象。Class类还定义了toString()方法。</p>
<h2 id="4-跨域，ajax的参数，jsonp，同源策略"><a href="#4-跨域，ajax的参数，jsonp，同源策略" class="headerlink" title="4. 跨域，ajax的参数，jsonp，同源策略"></a>4. 跨域，ajax的参数，jsonp，同源策略</h2><p>  URL由协议、域名、端口和路径组成。</p>
<p>为什么要有同源策略：<br>  比如一个黑客程序，他利用Iframe把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过Javascript读取到你的表单中input中的内容，这样用户名，密码就轻松到手。</p>
<p>解决跨域的方法：<br>  （1）    CORS跨域资源共享<br>  服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。<br>  （2）    JSONP<br>  原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。<br>  JSONP通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。<br>  优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求，格式要求严格。<br>  （3）    通过修改document.domain来跨子域<br>  （4）    使用window.name来进行跨域<br>  （5）    使用HTML5的window.postMessage方法跨域</p>
<h2 id="5-ES6的特性，let-const-var的区别，箭头函数的作用"><a href="#5-ES6的特性，let-const-var的区别，箭头函数的作用" class="headerlink" title="5. ES6的特性，let,const,var的区别，箭头函数的作用"></a>5. ES6的特性，let,const,var的区别，箭头函数的作用</h2><p>（1）let声明的变量只在let命令所在的代码块内有效<br>（2）let不存在变量提升，即在变量声明之前不能使用。而var定义的变量在声明前是可以使用的，值为undefined。暂时性死区。<br>（3）在相同作用域内不允许重复声明。<br>块级作用域的好处：<br>  （1）如果没有块级作用域，内层变量可能会覆盖外层变量。<br>  （2）用来计数的循环变量泄露为全局变量。</p>
<p>箭头函数是的表达更加简洁。<br>  （1）    函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>  （2）    不可以当作构造函数，也就是说，不可以使用new命令。<br>  （3）    不可以使用arguments对象，该对象在函数体内不存在。如何要用可以用rest参数代替。<br>  （4）    不可以使用yield命令，因此箭头函数不能做generator函数.</p>
<p>Set类似于数组，但成员的值都是唯一的，没有重复值。<br>  操作方法：<br>  -set.add(value)添加某个值，返回set结构本身<br>  -set.delete(value)删除某个值，返回一个布尔值，表示删除是否成功。<br>  -has(value)返回一个布尔值，表示是否包含该值。<br>  -clear()删除所有元素，没有返回值。<br>  遍历方法：<br>  -keys()返回键名的遍历器<br>  -values()返回键值的遍历器<br>  -entries()返回键值对的遍历器<br>  -forEach()使用回调函数遍历每个成员</p>
<p>  Map是键值对的集合<br>  Iterator遍历器</p>
<p>  用next方法来移动指针。<br>  -for..of遍历数组，set和map。</p>
<p>  Module的语法<br>  Commonjs用于服务器端，AMD规范用于浏览器。ES6的加载为编译时加载或静态加载，即ES6可以在编译时就完成模块加载，效率比CommonJS模块的加载方式高<br>  Import, export命令<br>  通过 Babel 转码，CommonJS 模块的require命令和 ES6 模块的import命令</p>
<h2 id="6-promise的方法"><a href="#6-promise的方法" class="headerlink" title="6. promise的方法"></a>6. promise的方法</h2><p>  Promise是异步编程的一种解决方案。</p>
<p>  Promise对象有以下两个特点：<br>  1）    对象的状态不受外界影响。有三种状态，pending, fulfilled, rejected。<br>  2）    一旦状态改变，就不会再变，任何时候都可以得到这个结果。成为resolved。</p>
<p>  Promise对象是一个构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p>
<p>  Promise的方法<br>  （1）    Promise.prototype.then()<br>  then方法返回的是新的promise对象。<br>  （2）    Promise.prototpe.catch()<br>  是发生错误时的回调函数<br>  （3）    Promise.all()，promise.race()<br>  用于将多个promise实例，包装成一个新的promise实例。<br>  （4）    promise.resolve()，promise.reject()<br>  将现有的对象转化为promise对象</p>
<h2 id="7-状态码200，301，302，304，500，504"><a href="#7-状态码200，301，302，304，500，504" class="headerlink" title="7. 状态码200，301，302，304，500，504"></a>7. 状态码200，301，302，304，500，504</h2><p>-200 ： OK，表示一切正常<br>-301 ： 永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替<br>-302 ： Found，临时移动，与301类似，但资源知识临时被移动。客户端应继续使用原有URL。<br>-304 ： Not Modified，未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回指定日期之后修改的资源。<br>-500 ： Internal Sever error，服务器内部错误，无法完成请求。<br>-502 ： Bad Gateway，充当网关或代理的服务器，从远端服务器接收到了一个无效的请求。<br>-504 ： Gateway Time-out，充当网关或代理的服务器，未及时从远端服务器获取请求。</p>
<h2 id="8-如何学习前端知识-前端有什么作用"><a href="#8-如何学习前端知识-前端有什么作用" class="headerlink" title="8. 如何学习前端知识,前端有什么作用"></a>8. 如何学习前端知识,前端有什么作用</h2><h2 id="9-webpack有什么用"><a href="#9-webpack有什么用" class="headerlink" title="9. webpack有什么用"></a>9. webpack有什么用</h2><p>Webpack分析项目结构，找到javascript模块以及其它一些浏览器不能直接运行的拓展语言，并将其打包为合适的格式以供浏览器使用。<br>web开发中常用到的静态资源主要有JavaScript、CSS、图片、Jade等文件，webpack中将静态资源文件称之为模块。webpack是一个module bundler(模块打包工具)，其可以兼容多种js书写规范，且可以处理模块间的依赖关系，具有更强大的js模块化的功能。Webpack对它们进行统一的管理以及打包发布</p>
<p>为什么使用webpack：<br>  a)    模块化，把复杂的程序细小为小的文件<br>  b)    在javascript上拓展的开发语言，浏览器不能直接识别的。<br>  c)    Scss, less等css预处理器</p>
<h2 id="10-HTML5"><a href="#10-HTML5" class="headerlink" title="10. HTML5"></a>10. HTML5</h2><p>新特性：</p>
<ul>
<li>用于绘图的canvas元素</li>
<li>用于媒介回放的video和audio元素</li>
<li>对本地离线存储的更好的支持</li>
<li>新的特殊内容元素，比如article,footer,header,nav,section</li>
<li>新的表单控件，比如calendar,date,time,email,url,search</li>
</ul>
<ol>
<li>web上的视频<br>HTML5规定了一种通过video元素来包含视频的标准方法。</li>
<li>web上的音频<br>HTML5规定了一种通过audio元素来包含音频的标准方法。</li>
<li>拖放Drag和drop<br>在HTML5中，拖放是标准的一部分，任何元素都能够拖放。</li>
<li>Canvas<br>HTML5中canvas元素使用javascript在网页上绘制图像。<br>画布是一个举行区域，可以控制其每一像素。<br>canvas拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</li>
<li>SVG<br>SVG指可伸缩矢量图形，定义用于网络的基于矢量的图形，使用XML格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失。</li>
<li>Geolocation地理定位<br>HTML5 Geolocation API用于获得用户的地理位置。<br>-navigator.geolocation.getCurrentPosition();</li>
<li>在客户端存储数据<br>HTML5提供了两种在客户端存储数据的新方法：</li>
</ol>
<ul>
<li>localStorage - 没有时间限制的数据存储</li>
<li>sessionStorage -针对一个session的数据存储<br>之前都是由cookie完成的，但是cookie不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得cookie速度很慢而且效率也不高。</li>
</ul>
<h2 id="11-为什么使用vue"><a href="#11-为什么使用vue" class="headerlink" title="11. 为什么使用vue"></a>11. 为什么使用vue</h2><p>(1) vue的核心库只关注视图层，并且非常容易学习<br>(2) 单页应用程序(SPA)，一个页面就是应用。<br>(3) jquery是操作DOM来才做HTML的DOM结构，</p>
<h2 id="12-vue的父子之间通信"><a href="#12-vue的父子之间通信" class="headerlink" title="12. vue的父子之间通信"></a>12. vue的父子之间通信</h2><p>在vue中，父子组件的关系可以总结为props down，events up。父组件通过props向下传递数据给子组件，子组件通过events给父组件发送信息。</p>
<p>-events<br>每个Vue实例都实现了事件接口。<br>-使用$on(eventName)监听事件<br>-使用$emit(eventName)触发事件，子组件向父组件触发事件<br>$on和$emit可以实现非父子组件通信</p>
<h2 id="12-你所了解的前端的东西有哪些"><a href="#12-你所了解的前端的东西有哪些" class="headerlink" title="12. 你所了解的前端的东西有哪些"></a>12. 你所了解的前端的东西有哪些</h2><p>基础：javascript, css, html，对应的版本ES6, CSS3, HTML5<br>前端框架：react, vue, angular，zepto<br>前端库： jquery, bootstrap, elementUI, amazeUI, echarts, canave<br>模板引擎： jade<br>前端模块管理： ES6, CommonJS, AMD<br>前端构建工具：webpack, grunt, gulp<br>版本控制： git, github, svn<br>交互： ajax, http, https,<br>后端： php, java(jsp), nodejs，服务端框架：express, koa, servlet<br>数据库： mysql, oracle, mongodb, redis</p>
<h2 id="13-什么是闭包，闭包的优点与缺点"><a href="#13-什么是闭包，闭包的优点与缺点" class="headerlink" title="13. 什么是闭包，闭包的优点与缺点"></a>13. 什么是闭包，闭包的优点与缺点</h2><p>闭包是有权访问另一个函数作用域中的变量的函数。<br>在javascript中，只有函数内部的子函数才能读取局部变量，所以闭包是定义在一个函数内部的函数。</p>
<p>闭包的用处：<br>1）    可以读取函数内部的变量<br>2）让函数内部的变量的值保持在内存中。</p>
<p>闭包的注意点：<br>1）    闭包会使得函数中的变量保存在内存中，不能滥用闭包。解决方法，在退出函数之前，将不适用的局部变量全部删除。<br>2）    闭包会在父函数外部改变父函数内部变量的值。解决方法，不要随便改变父函数内部变量的值。</p>
<p>闭包的缺点：<br>闭包会常驻内存，会增大内存的使用量，使用不当容易造成内存泄露。</p>
<h2 id="14-js内置对象的arguments"><a href="#14-js内置对象的arguments" class="headerlink" title="14. js内置对象的arguments"></a>14. js内置对象的arguments</h2><p>-typeof arguments ===’object’<br>通过arguments对象能让函数调用数目不定的参数，代表当前方法被传入的所有的参数。</p>
<h2 id="15-js的异步"><a href="#15-js的异步" class="headerlink" title="15. js的异步"></a>15. js的异步</h2><p>（1）Generator函数<br>执行generator函数会返回一个遍历器对象，也就是generator函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历generator函数内部的每一个状态。<br>特征：<br>1）    function关键字与韩树明之间有一个星号；<br>2）函数体内使用yield表达式，定义不同的内部状态。<br>调用generator函数后，该函数并不执行，返回的也不是函数运行的结果，而是一个指向内部状态的指针。下一步必须调用遍历器的next方法，使得指针向下一个状态。每次调用next方法，内部指针就从函数头或上一次停下来的地方开始执行，直到遇到下一个yield表达式或return。<br>（2）async函数<br>在function前面加async把generator中的yield改成 await。返回值是promise对象。<br>（3）ajax<br>是异步javascript和XML，用于在WEB页面中实现异步数据交互<br>创建XMLHttpResponse对象-&gt;创建新的http请求，指定http方法，url等-&gt;状态变化函数-&gt;发送请求<br>（4）promise</p>
<h1 id="搜狐新媒体一面："><a href="#搜狐新媒体一面：" class="headerlink" title="搜狐新媒体一面："></a>搜狐新媒体一面：</h1><h2 id="1-双等号与三等号"><a href="#1-双等号与三等号" class="headerlink" title="1.    双等号与三等号"></a>1.    双等号与三等号</h2><p>===运算符判断相等的流程是怎样的</p>
<ol>
<li>如果两个值不是相同类型，它们不相等</li>
<li>如果两个值都是null或者都是undefined，它们相等</li>
<li>如果两个值都是布尔类型true或者都是false，它们相等</li>
<li>如果其中有一个是NaN，它们不相等</li>
<li>如果都是数值型并且数值相等，他们相等， -0等于0</li>
<li>如果他们都是字符串并且在相同位置包含相同的16位值，它们相等；如果在长度或者内容上不等，它们不相等；两个字符串显示结果相同但是编码不同==和===都认为他们不相等</li>
<li>如果他们指向相同对象、数组、函数，它们相等；如果指向不同对象，他们不相等</li>
</ol>
<p>==运算符判断相等的流程是怎样的</p>
<ol>
<li>如果两个值类型相同，按照===比较方法进行比较</li>
<li>如果类型不同，使用如下规则进行比较</li>
<li>如果其中一个值是null，另一个是undefined，它们相等</li>
<li>如果一个值是数字另一个是字符串，将字符串转换为数字进行比较</li>
<li>如果有布尔类型，将true转换为1，false转换为0，然后用==规则继续比较</li>
<li>如果一个值是对象，另一个是数字或字符串，将对象转换为原始值然后用==规则继续比较</li>
<li>其他所有情况都认为不相等</li>
</ol>
<h2 id="2-Undefined和null"><a href="#2-Undefined和null" class="headerlink" title="2.    Undefined和null"></a>2.    Undefined和null</h2><h2 id="3-Typeof-undefined-typeof-null"><a href="#3-Typeof-undefined-typeof-null" class="headerlink" title="3.    Typeof undefined, typeof null"></a>3.    Typeof undefined, typeof null</h2><h2 id="4-冒泡与捕获"><a href="#4-冒泡与捕获" class="headerlink" title="4.    冒泡与捕获"></a>4.    冒泡与捕获</h2><h2 id="5-图片轮播原生js"><a href="#5-图片轮播原生js" class="headerlink" title="5.    图片轮播原生js"></a>5.    图片轮播原生js</h2><h2 id="6-是否研究vue的原生js"><a href="#6-是否研究vue的原生js" class="headerlink" title="6.    是否研究vue的原生js"></a>6.    是否研究vue的原生js</h2><h2 id="7-前端包括的内容"><a href="#7-前端包括的内容" class="headerlink" title="7.    前端包括的内容"></a>7.    前端包括的内容</h2><h1 id="CVTE一面"><a href="#CVTE一面" class="headerlink" title="CVTE一面"></a>CVTE一面</h1><h2 id="1-CSS盒子模型"><a href="#1-CSS盒子模型" class="headerlink" title="1. CSS盒子模型"></a>1. CSS盒子模型</h2><p><img src="http://www.runoob.com/images/box-model.gif" alt=""></p>
<ul>
<li>margin：清除边框外的区域，外边距是透明的。</li>
<li>border：围绕在内边距和内容外的边框。</li>
<li>padding：清除内容周围的区域，内边距是透明的。</li>
<li>content：盒子的内容，显示文本和图像。</li>
</ul>
<p>总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距<br>总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p>
<h2 id="2-清除浮动的方法"><a href="#2-清除浮动的方法" class="headerlink" title="2. 清除浮动的方法"></a>2. 清除浮动的方法</h2><p>-relative定位： 相对定位元素的定位是相对其正常的位置。相对定位元素经常被用来作为绝对定位元素的容器块。<br>-absolute定位： 绝对定位的元素的位置相对于最近的已定位的父元素，如果元素没有已定位的父元素，那么它的位置相对与<html>。absolute定位使元素的位置与文档流无关，因此不占据空间。absolute定位的元素和其他元素重叠。z - index用来确定重叠元素的深度。<br>-float浮动：会使元素向左或向右移动，其周围的元素也会重新排列。往往用于图像。<br>浮动规则：</html></p>
<ul>
<li>元素是水平移动的。</li>
<li>一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</li>
<li>浮动元素之后的元素将围绕它。</li>
<li>浮动元素之前的元素将不会受到影响。</li>
<li>如果是彼此相邻的浮动元素，如果有空间，它们会彼此相邻。</li>
</ul>
<p><em>浮动产生的副作用：</em><br>（1）块级元素会钻到浮动元素下面，被浮动元素所覆盖。<br>（2）与浮动元素同级的非浮动元素会跟随其后。<br>（3）浮动元素的父元素塌陷</p>
<p><em>清除浮动：</em><br>（1） 额外div：在需要清除浮动的元素前面添加一个空的div，给这个div设置，<code>clear: both</code>.<br>（2） 高度塌陷时，由于父元素没有设置高度和宽度，当子元素设置了浮动，脱离了标准流，可以在父元素中设置<code>overflow:hidden // 或auto</code>，或者给浮动元素父级设置高度<br>（3）利用伪类元素来清除有浮动的标签。代表一个元素之后最近的元素。:after伪类元素实现元素末尾添加一个看不见的块元素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">content</span>:<span class="string">"."</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">visibility</span>:hidden;</div><div class="line">  <span class="attribute">display</span>:block;</div><div class="line">  <span class="attribute">clear</span>:both;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://www.cnblogs.com/zhongweizhu/p/6003537.html" target="_blank" rel="external">http://www.cnblogs.com/zhongweizhu/p/6003537.html</a></p>
<h2 id="3-行内元素和块级元素"><a href="#3-行内元素和块级元素" class="headerlink" title="3. 行内元素和块级元素"></a>3. 行内元素和块级元素</h2><p>block元素包括<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>,<span class="tag">&lt;<span class="name">p</span>&gt;</span>,<span class="tag">&lt;<span class="name">h1</span>&gt;</span>...<span class="tag">&lt;<span class="name">h6</span>&gt;</span>,<span class="tag">&lt;<span class="name">ol</span>&gt;</span>,<span class="tag">&lt;<span class="name">ul</span>&gt;</span>,<span class="tag">&lt;<span class="name">dl</span>&gt;</span>,<span class="tag">&lt;<span class="name">table</span>&gt;</span>,<span class="tag">&lt;<span class="name">address</span>&gt;</span>,<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>,<span class="tag">&lt;<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>特点：</em><br>1.每个块级元素都是独自占一行，其后的元素也只能另起一行。<br>2.元素的高度、宽度、行高和顶底边距都是可以设置的。<br>3.元素的宽度如果不设置的话，默认为父元素的宽度。</p>
<p>inline元素包括<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>,<span class="tag">&lt;<span class="name">b</span>&gt;</span>,<span class="tag">&lt;<span class="name">br</span>&gt;</span>,<span class="tag">&lt;<span class="name">code</span>&gt;</span>,<span class="tag">&lt;<span class="name">em</span>&gt;</span>,<span class="tag">&lt;<span class="name">font</span>&gt;</span>,<span class="tag">&lt;<span class="name">i</span>&gt;</span>,<span class="tag">&lt;<span class="name">img</span>&gt;</span>,<span class="tag">&lt;<span class="name">input</span>&gt;</span>,<span class="tag">&lt;<span class="name">label</span>&gt;</span>,<span class="tag">&lt;<span class="name">small</span>&gt;</span>,<span class="tag">&lt;<span class="name">span</span>&gt;</span>,<span class="tag">&lt;<span class="name">strong</span>&gt;</span>,<span class="tag">&lt;<span class="name">sub</span>&gt;</span>,<span class="tag">&lt;<span class="name">sup</span>&gt;</span>,<span class="tag">&lt;<span class="name">textarea</span>&gt;</span>,<span class="tag">&lt;<span class="name">u</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><em>特点：</em><br>1.可以和其他行内元素一行。<br>2.元素的高度、宽度和顶部及底部边距不可设置。<br>3.元素的宽度就是它包含的内容、图片的宽度，不可改变。</p>
<p><em>行内元素和块级元素的转换：</em><br>1.块级元素-&gt;行内元素 :<code>display:inline</code><br>2.行内元素-&gt;块级元素 ：<code>display:block</code></p>
<p>如果向设置高度、宽度、行高及顶底边距，又想元素处于一行，可以设置<code>display:inline-block</code></p>
<p><em>行内元素和块级元素的区别：</em><br>(1) 行内元素同一行水平排列。块级元素各占一行，垂直方法排列。<br>(2) 块级元素可以包含行内元素和块级元素，但行内元素不能包含块级元素。<br>(3) 行内元素与块级元素的属性不同，主要是在盒模型属性上。<br>(4) 行内元素设置width无效，height无效（可以设置line-height），margin上下无效，padding上下无效，水平margin和padding有效，宽度取决于内容的宽度。</p>
<p><em>拓展：</em></p>
<h3 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h3><ol>
<li>CSS3选择器<br>1) E: last-child 匹配父元素的最后一个子元素；<br>2) E: nth-child(n) 匹配父元素的第n个子元素E；<br>3) E: nth-last-child(n) CSS3匹配父元素的倒数第n个子元素E。</li>
<li>@font-face特性<br>可以加载字体样式，能够加载服务器端的字体文件。</li>
<li>圆角</li>
<li>多列布局</li>
<li>阴影</li>
<li>CSS渐变效果</li>
<li>CSS弹性盒子模型</li>
<li>CSS3制作特效</li>
</ol>
<h3 id="不同浏览器的兼容性及解决方法"><a href="#不同浏览器的兼容性及解决方法" class="headerlink" title="不同浏览器的兼容性及解决方法"></a>不同浏览器的兼容性及解决方法</h3><h2 id="4-闭包"><a href="#4-闭包" class="headerlink" title="4. 闭包"></a>4. 闭包</h2><h2 id="5-http状态码，304原理"><a href="#5-http状态码，304原理" class="headerlink" title="5. http状态码，304原理"></a>5. http状态码，304原理</h2><h2 id="6-跨域"><a href="#6-跨域" class="headerlink" title="6. 跨域"></a>6. 跨域</h2><h2 id="7-依次每隔两秒输出-1-2-3-4-5"><a href="#7-依次每隔两秒输出-1-2-3-4-5" class="headerlink" title="7. 依次每隔两秒输出[1,2,3,4,5]"></a>7. 依次每隔两秒输出[1,2,3,4,5]</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(arr[i]);</div><div class="line">  i++;</div><div class="line">  <span class="keyword">if</span>(i&gt;arr.length) &#123;</div><div class="line">    clearInterval(t);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> t = setInterval(<span class="string">'show(arr)'</span>,<span class="number">2000</span>);</div></pre></td></tr></table></figure>
<h2 id="8-Array-map-方法"><a href="#8-Array-map-方法" class="headerlink" title="8. Array.map()方法"></a>8. Array.map()方法</h2><p><code>Array.prototype.map()</code>作用是创建一个新数组，其结果是该数组中每隔元素都调用一个提供的函数后返回的结果。<br>基本语法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue, index, array</span>) </span>&#123;</div><div class="line">    <span class="comment">// Return element for new_array</span></div><div class="line">&#125;[, thisArg])</div></pre></td></tr></table></figure></p>
<p>callback 函数会被自动传入三个参数：数组元素，元素索引，原数组本身。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</div><div class="line"><span class="keyword">let</span> doubles = numbers.map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line">   <span class="keyword">return</span> x * <span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// doubles is now [2, 10, 20, 30]</span></div><div class="line"><span class="comment">// numbers is still [1, 5, 10, 15]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</div><div class="line"><span class="keyword">let</span> roots = numbers.map(<span class="built_in">Math</span>.sqrt);</div><div class="line"></div><div class="line"><span class="comment">// roots is now [1, 2, 3]</span></div><div class="line"><span class="comment">// numbers is still [1, 4, 9]</span></div></pre></td></tr></table></figure>
<p><em>拓展：</em><br><code>call(this,arg1,arg2)</code>和<code>apply(this,[arg1,arg2])</code><br>这两个函数是为了动态改变this而出现的。当一个object没有某个方法，但其他的有，我们可以借用<code>call()</code>或<code>apply()</code>来操作。<br>明确知道参数数量时用<code>call()</code>；不确定参数数量时用<code>apply()</code>，把参数push进数组里去。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">obj.call(thisObj, arg1, arg2, ...);</div><div class="line">obj.apply(thisObj, [arg1, arg2, ...]);</div></pre></td></tr></table></figure></p>
<p>两者作用一致，都是把obj(即this)绑定到thisObj，这时候thisObj具备了obj的属性和方法。</p>
<h2 id="9-字符串翻转"><a href="#9-字符串翻转" class="headerlink" title="9. 字符串翻转"></a>9. 字符串翻转</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'12345'</span>;</div><div class="line"><span class="built_in">Array</span>.prototype.map.call(str, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x;</div><div class="line">&#125;).reverse().join(<span class="string">''</span>);</div><div class="line"></div><div class="line"><span class="comment">// Output: '54321'</span></div></pre></td></tr></table></figure>
<h2 id="10-如何判断单链表的环？优化？"><a href="#10-如何判断单链表的环？优化？" class="headerlink" title="10. 如何判断单链表的环？优化？"></a>10. 如何判断单链表的环？优化？</h2><h2 id="11-let和var的区别（变量提升）"><a href="#11-let和var的区别（变量提升）" class="headerlink" title="11. let和var的区别（变量提升）"></a>11. let和var的区别（变量提升）</h2><h2 id="12-快速排序算法思路，时间复杂度"><a href="#12-快速排序算法思路，时间复杂度" class="headerlink" title="12. 快速排序算法思路，时间复杂度"></a>12. 快速排序算法思路，时间复杂度</h2><h2 id="13-在学习过程中遇到什么问题，怎么解决的"><a href="#13-在学习过程中遇到什么问题，怎么解决的" class="headerlink" title="13. 在学习过程中遇到什么问题，怎么解决的"></a>13. 在学习过程中遇到什么问题，怎么解决的</h2>]]></content>
      
        <categories>
            
            <category> 前端面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-前端安全（XSS,CSRF攻击技术）]]></title>
      <url>/2017/08/15/javascript-Safety/</url>
      <content type="html"><![CDATA[<p>简单的HTTP协议本身并不存在安全性问题，因此协议本身几乎不会成为攻击的对象。应用HTTP协议的服务器和客户端，以及运行在服务器上的Web应用等资源才是攻击目标。<br>在Web应用中，从浏览器那接收到的HTTP请求的全部内容，都可以在客户端自由地变更、篡改。所以Web应用可能会接收到与预期数据不相同的内容。<br>在HTTP请求报文内加载攻击代码，就能发起对Web应用的攻击。通过URL查询字段或表单、HTTP首部、Cookie等途径把攻击代码传入，若这时Web应用存在安全漏洞，那内部信息就会遭到窃取，或被攻击者拿到管理权限。<br>在web网页的脚本中，有些部分的显示内容会依据外界输入值而发生变化，而如果这些声称html的程序中存在问题，就会滋生名为跨站脚本的安全隐患<br>Web应用程序中，如果存在XSS漏洞，就会有以下风险：<br>1、用户的浏览器中运行攻击者的恶意脚本，从而导致库kit信息被窃取，攻击者就会假冒用户的信息进行登录。<br>2、攻击者能够获取用户的权限，来恶意使用web应用的功能。<br>3、可以向用户使用伪造的数据表单，通过钓鱼的方式来窃取用户的个人信息。也就是我们这里讲到的主要的钓鱼攻击和盗取cookie</p>
<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>Xss(cross-site scripting)攻击指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个 看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶意表单， 当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。</p>
<h1 id="XSS防范方法"><a href="#XSS防范方法" class="headerlink" title="XSS防范方法"></a>XSS防范方法</h1><p>1.代码里对用户输入的地方和变量都需要仔细检查长度和对”&lt;”,”&gt;”,”;”,”’”等字符做过滤；其次任何内容写到页面之前都必须加以encode，避免不小心把html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击。<br>2.避免直接在cookie 中泄露用户隐私，例如email、密码等等。<br>3.通过使cookie 和系统ip 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放。<br>4.尽量采用POST 而非GET 提交表单</p>
<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造。<br>你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p>
<h2 id="CSRF攻击攻击原理及过程"><a href="#CSRF攻击攻击原理及过程" class="headerlink" title="CSRF攻击攻击原理及过程"></a>CSRF攻击攻击原理及过程</h2><ol>
<li>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</li>
<li>在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</li>
<li>用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</li>
<li>网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</li>
<li>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</li>
</ol>
<h2 id="CSRF漏洞检测"><a href="#CSRF漏洞检测" class="headerlink" title="CSRF漏洞检测"></a>CSRF漏洞检测</h2><p>  检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p>
<h2 id="防御CSRF攻击"><a href="#防御CSRF攻击" class="headerlink" title="防御CSRF攻击"></a>防御CSRF攻击</h2><ol>
<li>验证HTTP Referer字段</li>
<li>在请求地址中添加token并验证</li>
<li>在HTTP头重自定义属性并验证</li>
</ol>
<h1 id="XSS与CSRF有什么区别吗？"><a href="#XSS与CSRF有什么区别吗？" class="headerlink" title="XSS与CSRF有什么区别吗？"></a>XSS与CSRF有什么区别吗？</h1><p>XSS是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。<br>要完成一次CSRF攻击，受害者必须依次完成两个步骤：<br>1.登录受信任网站A，并在本地生成Cookie。 　　2.在不登出A的情况下，访问危险网站B。</p>
<p>CSRF的防御<br>1.服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。<br>2.使用验证码</p>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端攻击技术，XSS </tag>
            
            <tag> CSRF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-HTTP与HTTPS]]></title>
      <url>/2017/08/11/javascript-HTTP-HTTPS/</url>
      <content type="html"><![CDATA[<h1 id="为什么使用http2-0"><a href="#为什么使用http2-0" class="headerlink" title="为什么使用http2.0"></a>为什么使用http2.0</h1><hr>
<ol>
<li>慢<br>影响一个网络请求的因素主要有两个，带宽和延迟。大部分时候都是延迟在影响响应速度。</li>
<li>连接无法复用<br>连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动对文件类大的请求影响较大。</li>
<li>head of line blocking<br>head of line blocking会导致贷款无法被充分利用。</li>
</ol>
<h1 id="http2-0-VS-http1-1"><a href="#http2-0-VS-http1-1" class="headerlink" title="http2.0 VS http1.1"></a>http2.0 VS http1.1</h1><ul>
<li>多路复用<br>多路复用通过多个请求stream共享一个tcp连接的方式，解决了http1.x holb（head of line blocking）的问题，降低了延迟同时提高了带宽的利用率。<br><img src="https://segmentfault.com/image?src=http://7xs2h9.com1.z0.glb.clouddn.com/blog/http-6.png&amp;objectId=1190000005085636&amp;token=43703ac94c91947ba9645504b8781cf1" alt=""></li>
<li>压缩头部<br>HTTP/2.0规定了在客户端和服务器端会使用并且维护「首部表」来跟踪和存储之前发送的键值对，对于相同的头部，不必再通过请求发送，只需发送一次。<br>事实上,如果请求中不包含首部（例如对同一资源的轮询请求），那么首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。<br>如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP2.0的连接存续期内始终存在,由客户端和服务器共同渐进地更新。<br><img src="https://segmentfault.com/image?src=http://7xs2h9.com1.z0.glb.clouddn.com/blog/Header%E5%A4%8D%E7%94%A8.png&amp;objectId=1190000005085636&amp;token=881e1adc7d05c8bab090e1d9f60e188a" alt=""></li>
<li>二进制分帧<br>在应用层与传输层之间增加一个二进制分帧层，以此达到“在不改动HTTP的语义，HTTP 方法、状态码、URI及首部字段的情况下，突破HTTP1.1的性能限制，改进传输性能，实现低延迟和高吞吐量。”<br>在二进制分帧层上，HTTP2.0会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码，其中HTTP1.x的首部信息会被封装到Headers帧，而我们的request body则封装到Data帧里面。<br><img src="https://segmentfault.com/image?src=http://7xs2h9.com1.z0.glb.clouddn.com/blog/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E5%B8%A7.png&amp;objectId=1190000005085636&amp;token=e28a899dad66e106087368ee8d4f5629" alt=""></li>
<li>请求优先级<br>多路复用导致所有资源都是并行发送，所以需要优先级的概念，这样可以对重要文件进行先传输，加速页面的渲染。</li>
<li>服务器推送<br>服务器推送是指客户端请求之前发送数据的机制。</li>
</ul>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p>
<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p>是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>
<h2 id="HTTPS工作原理"><a href="#HTTPS工作原理" class="headerlink" title="HTTPS工作原理"></a>HTTPS工作原理</h2><p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。<br>（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。<br>（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。<br>（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。<br>（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。<br>（5）Web服务器利用自己的私钥解密出会话密钥。<br>（6）Web服务器利用会话密钥加密与客户端之间的通信。<br><img src="http://pic002.cnblogs.com/images/2012/339704/2012071410212142.gif" alt=""></p>
<h2 id="HTTPS的优点"><a href="#HTTPS的优点" class="headerlink" title="HTTPS的优点"></a>HTTPS的优点</h2><p>尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：<br>（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；<br>（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。<br>（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。<br>（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p>
<h1 id="HTTP-与HTTPS"><a href="#HTTP-与HTTPS" class="headerlink" title="HTTP 与HTTPS"></a>HTTP 与HTTPS</h1><p>http是HTTP协议运行在TCP之上。所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。https是HTTP运行在SSL/TLS之上，SSL/TLS运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。此外客户端可以验证服务器端的身份，如果配置了客户端验证，服务器方也可以验证客户端的身份。<br>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。<br>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。<br>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)]]></title>
      <url>/2017/08/10/javascript-howtoshowhtml/</url>
      <content type="html"><![CDATA[<h1 id="从浏览器地址栏输入url到显示页面的步骤-以HTTP为例"><a href="#从浏览器地址栏输入url到显示页面的步骤-以HTTP为例" class="headerlink" title="从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)"></a>从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)</h1><p><strong>记忆</strong>：输URL、查缓存、解析URL、HTTP请求报文、获取IP、建立TCP连接、发送请求、解析请求、缓存是否新鲜304、返回响应报文、关闭TCP、浏览器检查状态码、缓存资源、解码、解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本。</p>
<h2 id="1、输入地址"><a href="#1、输入地址" class="headerlink" title="1、输入地址"></a>1、输入地址</h2><p>    当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得url了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 url，然后给出智能提示，让你可以补全url地址。对于google的chrome的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 enter，页面就出来了。</p>
<h2 id="2、浏览器查找域名的-IP-地址"><a href="#2、浏览器查找域名的-IP-地址" class="headerlink" title="2、浏览器查找域名的 IP 地址　　"></a>2、浏览器查找域名的 IP 地址　　</h2><p>     1、请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。<br>     2、如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS服务器 。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。<br>     3、查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询。<br>    4、根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。<br>    5、本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。<br>    6、最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。<br>下面这张图很完美的解释了这一过程：<br><img src="http://www.maixj.net/wp-content/uploads/2015/10/dns.jpg?_=6547807" alt=""></p>
<p>—-知识扩展—-</p>
<p>1)什么是DNS？<br>　　DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。<br>　　通俗的讲，我们更习惯于记住一个网站的名字，比如www.baidu.com,而不是记住它的ip地址，比如：167.23.10.2。而计算机更擅长记住网站的ip地址，而不是像www.baidu.com等链接。因为，DNS就相当于一个电话本，比如你要找www.baidu.com这个域名，那我翻一翻我的电话本，我就知道，哦，它的电话（ip）是167.23.10.2。</p>
<p>2)DNS查询的两种方式：递归查询和迭代查询</p>
<p>1、递归解析<br>当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。<br><img src="http://s16.sinaimg.cn/mw690/4078ccd6hcdcf48aab7af&amp;690?_=6547807" alt=""></p>
<p>2、迭代解析<br>　　当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。比如说：baidu.com的服务器ip地址在192.168.4.5。<br><img src="http://s12.sinaimg.cn/mw690/4078ccd6h7afb21339ebb&amp;690?_=6547807" alt=""></p>
<p>3)DNS域名称空间的组织方式</p>
<p>我们在前面有说到根DNS服务器，域DNS服务器，这些都是DNS域名称空间的组织方式。按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例<br><img src="http://img1.51cto.com/attachment/201203/171409287.jpg?_=6547807" alt=""></p>
<p>4)DNS负载均衡<br>　　当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用DNS负载均衡技术，它的原理是在DNS服务器中为同一个主机名配置多个IP地址,在应答DNS查询时,DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。 　　</p>
<h2 id="3、浏览器向-web-服务器发送一个-HTTP-请求"><a href="#3、浏览器向-web-服务器发送一个-HTTP-请求" class="headerlink" title="3、浏览器向 web 服务器发送一个 HTTP 请求"></a>3、浏览器向 web 服务器发送一个 HTTP 请求</h2><p>　　拿到域名对应的IP地址之后，浏览器会以一个随机端口（1024&lt;端口&lt;65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接。<br>　　<br>TCP连接如图所示:<br><img src="http://img.bitscn.com/upimg/allimg/c160831/14H61600J21Z-2N62.jpg?_=6547807" alt=""></p>
<p>　　建立了TCP连接之后，发起一个http请求。一个典型的 http request header 一般需要包括请求的方法，例如 GET 或者 POST 等，不常用的还有 PUT 和 DELETE 、HEAD、OPTION以及 TRACE 方法，一般的浏览器只能发起 GET 或者 POST 请求。<br>　　客户端向服务器发起http请求的时候，会有一些请求信息，请求信息包含三个部分：</p>
<p>请求方法URI协议/版本<br>请求头(Request Header)<br>请求正文：<br>下面是一个完整的HTTP请求例子：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET/sample.jspHTTP/1.1</div><div class="line">Accept:image/gif.image/jpeg,*/*</div><div class="line">Accept-Language:zh-cn</div><div class="line">Connection:Keep-Alive</div><div class="line">Host:localhost</div><div class="line">User-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)</div><div class="line">Accept-Encoding:gzip,deflate</div><div class="line"></div><div class="line">username=jinqiao&amp;password=1234</div></pre></td></tr></table></figure></p>
<p>注意：最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。</p>
<p>（1）请求的第一行是“方法URL议/版本”：GET/sample.jsp HTTP/1.1<br>（2）请求头(Request Header)<br>　　 请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Accept:image/gif.image/jpeg.*/*</div><div class="line">Accept-Language:zh-cn</div><div class="line">Connection:Keep-Alive</div><div class="line">Host:localhost</div><div class="line">User-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)</div><div class="line">Accept-Encoding:gzip,deflate.</div></pre></td></tr></table></figure></p>
<p>（3）请求正文<br>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息：</p>
<p>username=jinqiao&amp;password=1234</p>
<p>—- 知识扩展—-</p>
<p>1）TCP三次握手</p>
<p>第一次握手：客户端A将标志位SYN置为1,随机产生一个值为seq=J（J的取值范围为=1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认；<br>第二次握手：服务端B收到数据包后由标志位SYN=1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态。<br>第三次握手：客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了。<br>如图所示：</p>
<p><img src="http://www.2cto.com/uploadfile/2013/1022/20131022025346218.png?_=6547807" alt=""></p>
<p>2）为什需要三次握手？<br>    《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”<br>    书中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。<br>    假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”。主要目的防止server端一直等待，浪费资源。</p>
<p>3）TCP四次挥手</p>
<p>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。<br>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与- SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。<br>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。<br>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p>
<p><img src="http://www.2cto.com/uploadfile/2013/1022/20131022025350523.png?_=6547807" alt=""></p>
<p>4）为什么建立连接是三次握手，而关闭连接却是四次挥手呢？<br>　　这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p>
<h2 id="4、服务器的永久重定向响应"><a href="#4、服务器的永久重定向响应" class="headerlink" title="4、服务器的永久重定向响应"></a>4、服务器的永久重定向响应</h2><p>　　服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问<a href="http://www.google.com/" target="_blank" rel="external">http://www.google.com/</a> 而非<a href="http://google.com/。" target="_blank" rel="external">http://google.com/。</a><br>　　为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像<a href="http://www.yy.com/和http://yy.com/，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。" target="_blank" rel="external">http://www.yy.com/和http://yy.com/，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。</a></p>
<p>—-扩展知识—-</p>
<p>1）301和302的区别。<br>　　301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。<br>　　他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；<br>　　302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301</p>
<p>2）重定向原因：<br>（1）网站调整（如改变网页目录结构）；<br>（2）网页被移到一个新地址；<br>（3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。<br>这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。</p>
<p>3）什么时候进行301或者302跳转呢？<br>    当一个网站或者网页24—48小时内临时移动到一个新的位置，这时候就要进行302跳转，而使用301跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。<br>清晰明确而言：使用301跳转的大概场景如下：</p>
<p>域名到期不想续费（或者发现了更适合网站的域名），想换个域名。<br>在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。<br>空间服务器不稳定，换空间的时候。</p>
<h2 id="5、浏览器跟踪重定向地址"><a href="#5、浏览器跟踪重定向地址" class="headerlink" title="5、浏览器跟踪重定向地址"></a>5、浏览器跟踪重定向地址</h2><p>现在浏览器知道了 “<a href="http://www.google.com/&quot;才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的" target="_blank" rel="external">http://www.google.com/&quot;才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的</a></p>
<h2 id="6、服务器处理请求"><a href="#6、服务器处理请求" class="headerlink" title="6、服务器处理请求"></a>6、服务器处理请求</h2><p>　　经过前面的重重步骤，我们终于将我们的http请求发送到了服务器这里，其实前面的重定向已经是到达服务器了，那么，服务器是如何处理我们的请求的呢？<br>　　后端从在固定的端口接收到TCP报文开始，它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。<br>　　一些大一点的网站会将你的请求到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过HTTP协议访问某网站应用服务器，而是先请求到Nginx，Nginx再请求应用服务器，然后将结果返回给客户端，这里Nginx的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。</p>
<p>如图所示：</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1489904964343&amp;di=c6043cd72bb60f4e129589b6a8f79299&amp;imgtype=0&amp;src=http%3A%2F%2Fhi.csdn.net%2Fattachment%2F201110%2F10%2F0_1318255239Hxxe.gif" alt=""><br>通过Nginx的反向代理，我们到达了web服务器，服务端脚本处理我们的请求，访问我们的数据库，获取需要获取的内容等等，当然，这个过程涉及很多后端脚本的复杂操作。由于对这一块不熟，所以这一块只能介绍这么多了。</p>
<p>—-扩展阅读—-</p>
<p>1）什么是反向代理？<br>    客户端本来可以直接通过HTTP协议访问某网站应用服务器，网站管理员可以在中间加上一个Nginx，客户端请求Nginx，Nginx请求应用服务器，然后将结果返回给客户端，此时Nginx就是反向代理服务器。</p>
<p><img src="http://www.2cto.com/uploadfile/Collfiles/20150518/201505180932502.jpg?_=6547807" alt=""></p>
<h2 id="7、服务器返回一个-HTTP-响应"><a href="#7、服务器返回一个-HTTP-响应" class="headerlink" title="7、服务器返回一个 HTTP 响应　"></a>7、服务器返回一个 HTTP 响应　</h2><p>　　经过前面的6个步骤，服务器收到了我们的请求，也处理我们的请求，到这一步，它会把它的处理结果返回，也就是返回一个HTPP响应。<br>HTTP响应与HTTP请求相似，HTTP响应也由3个部分构成，分别是：</p>
<p>状态行<br>响应头(Response Header)<br>响应正文<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Sat, 31 Dec 2005 23:59:59 GMT</div><div class="line">Content-Type: text/html;charset=ISO-8859-1</div><div class="line">Content-Length: 122</div><div class="line">＜html＞</div><div class="line">＜head＞</div><div class="line">＜title＞http＜/title＞</div><div class="line">＜/head＞</div><div class="line">＜body＞</div><div class="line">＜!-- body goes here --＞</div><div class="line">＜/body＞</div><div class="line">＜/html＞</div></pre></td></tr></table></figure></p>
<p>状态行：<br>状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。<br>格式: HTTP-Version Status-Code Reason-Phrase CRLF<br>例如: HTTP/1.1 200 OK \r\n<br>| -协议版本：是用http1.0还是其他版本<br>| -状态描述：状态描述给出了关于状态代码的简短的文字描述。比如状态代码为200时的描述为 ok<br>| -态代码：状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。如下</p>
<p>1xx：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。</p>
<p>100 Continue<br>101 Switching Protocols<br>2xx：成功状态码，表示服务器已成功接收到请求并进行处理。</p>
<p>200 OK 表示客户端请求成功<br>204 No Content 成功，但不返回任何实体的主体部分<br>206 Partial Content 成功执行了一个范围（Range）请求<br>3xx： 重定向状态码，表示服务器要求客户端重定向。</p>
<p>301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL<br>302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源<br>303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源<br>304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存<br>307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现<br>4xx：客户端错误状态码，表示客户端的请求有非法内容。</p>
<p>400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解<br>401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用<br>403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因<br>404 Not Found 请求的资源不存在，例如，输入了错误的URL<br>5xx：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。</p>
<p>500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求<br>503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常<br>响应头：<br>　　响应头部：由关键字/值对组成，每行一对，关键字和值用英文冒号”:”分隔，典型的响应头有：</p>
<p><img src="http://images2015.cnblogs.com/blog/776370/201703/776370-20170322193336611-2098719977.png" alt="">　　<br>响应正文<br>包含着我们需要的一些具体信息，比如cookie，html,image，后端返回的请求数据等等。这里需要注意，响应正文和响应头之间有一行空格，表示响应头的信息到空格为止，下图是fiddler抓到的请求正文，红色框中的：响应正文：</p>
<p><img src="http://images2015.cnblogs.com/blog/776370/201703/776370-20170319190828323-2078498869.png" alt=""></p>
<h2 id="8、浏览器显示-HTML"><a href="#8、浏览器显示-HTML" class="headerlink" title="8、浏览器显示 HTML"></a>8、浏览器显示 HTML</h2><p>　　在浏览器没有完整接受全部HTML文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍webkit的渲染过程，下图对应的就是WebKit渲染的过程，这个过程包括：</p>
<p>解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</p>
<p>　　浏览器在解析html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的CSS、iconfont等，请求过程是异步的，并不会影响html文档进行加载。<br>　　解析过程中，浏览器首先会解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。<br>　　DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。<br>　　页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p>
<p>　　当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。因为JS有可能会修改DOM，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。所以我明平时的代码中，js是放在html文档末尾的。<br>　　JS的解析是由浏览器中的JS解析引擎完成的，比如谷歌的是V8。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。<br>　　JS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。具体的过程可以看我这篇文章：点击这里 　　</p>
<h2 id="9、浏览器发送请求获取嵌入在-HTML-中的资源（如图片、音频、视频、CSS、JS等等）"><a href="#9、浏览器发送请求获取嵌入在-HTML-中的资源（如图片、音频、视频、CSS、JS等等）" class="headerlink" title="9、浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）"></a>9、浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）</h2><p>　　其实这个步骤可以并列在步骤8中，在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。比如我要获取外图片，CSS，JS文件等，类似于下面的链接：<br>图片：<a href="http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif" target="_blank" rel="external">http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif</a><br>CSS式样表：<a href="http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css" target="_blank" rel="external">http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css</a><br>JavaScript 文件：<a href="http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js" target="_blank" rel="external">http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js</a></p>
<p>这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等…<br>不像动态页面，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取，或者可以放到CDN中</p>
<p><a href="https://xianyulaodi.github.io/2017/03/22/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88-%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="external">https://xianyulaodi.github.io/2017/03/22/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88-%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</a></p>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 浏览器地址 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-跨域]]></title>
      <url>/2017/08/09/javascript-cross-domain/</url>
      <content type="html"><![CDATA[<h1 id="javascript的同源策略"><a href="#javascript的同源策略" class="headerlink" title="javascript的同源策略"></a>javascript的同源策略</h1><h2 id="何为同源"><a href="#何为同源" class="headerlink" title="何为同源"></a>何为同源</h2><p>URL由协议、域名、端口和路径组成，如果两个URL的协议、域名和端口相同，则表示他们同源。</p>
<h2 id="同源策略的含义"><a href="#同源策略的含义" class="headerlink" title="同源策略的含义"></a>同源策略的含义</h2><p>脚本只能读取和所属文档来源相同的窗口和文档的属性。</p>
<h2 id="为什么要有同源限制？"><a href="#为什么要有同源限制？" class="headerlink" title="为什么要有同源限制？"></a>为什么要有同源限制？</h2><p>我们举例说明：比如一个黑客程序，他利用Iframe把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过Javascript读取到你的表单中input中的内容，这样用户名，密码就轻松到手。</p>
<hr>
<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>只要协议、域名、端口有任何一个不同，都被当作是不同的域。</p>
<p>解决跨域的方法</p>
<h2 id="1-跨域资源共享-CORS"><a href="#1-跨域资源共享-CORS" class="headerlink" title="1. 跨域资源共享(CORS)"></a>1. 跨域资源共享(CORS)</h2><p>定义了必须在访问跨域资源时，浏览器与服务器应该如何沟通。</p>
<ul>
<li>基本思想：使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败<br>服务器端对于CORS的支持，主要就是通过设置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.open(<span class="string">"￼GET"</span>, <span class="string">"/trigkit4"</span>,<span class="literal">true</span>);</div><div class="line">    xhr.send();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>上面是使用了相对路径，如果用CORS，则代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.open(<span class="string">"￼GET"</span>, <span class="string">"http://segmentfault.com/u/trigkit4/"</span>,<span class="literal">true</span>);</div><div class="line">    xhr.send();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>把相对路径换成了其他域的绝对路径，也就是要跨哟访问的接口地址。<br>Access-Control-Allow-Origin来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问。</p>
<h2 id="2-通过jsonp跨域"><a href="#2-通过jsonp跨域" class="headerlink" title="2. 通过jsonp跨域"></a>2. 通过jsonp跨域</h2><p>jsonp也叫填充式JSON,是应用JSON的一种新方法，只不过是被包含在函数调用中的JSON。</p>
<ul>
<li>原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。<br>JSONP通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。<br>优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求，格式要求严格。<br>JSONP由两部分组成：回调函数和数据。回调函数是当响应来时应该在页面中调用的函数，而数据就是传入回调函数中的JSON数据。<br>在js中，我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，<strong>在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">    function dosomething(jsondata)&#123;</div><div class="line">        //处理获得的json数据</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script src="http://example.com/data.php?callback=dosomething"&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。所以jsonp是需要服务器端的页面进行相应的配合的。</p>
<ul>
<li>优点:<br>它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。</li>
<li>缺点：<br>它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</li>
</ul>
<h3 id="CORS与JSONP对比"><a href="#CORS与JSONP对比" class="headerlink" title="CORS与JSONP对比"></a>CORS与JSONP对比</h3><p>CORS与JSONP相比，无疑更为先进、方便和可靠。</p>
<ol>
<li>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。</li>
<li>使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。</li>
<li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。</li>
</ol>
<h2 id="3-通过修改document-domain来跨子域"><a href="#3-通过修改document-domain来跨子域" class="headerlink" title="3. 通过修改document.domain来跨子域"></a>3. 通过修改document.domain来跨子域</h2><p>将子域和主域的document.domain设为同一个主域.前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域<br>主域相同的使用document.domain。<br>修改document.domain的方法只适用于不同子域的框架间的交互。</p>
<h2 id="4-使用window-name来进行跨域"><a href="#4-使用window-name来进行跨域" class="headerlink" title="4. 使用window.name来进行跨域"></a>4. 使用window.name来进行跨域</h2><p>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的。</p>
<h2 id="5-使用HTML5的window-postMessage方法跨域"><a href="#5-使用HTML5的window-postMessage方法跨域" class="headerlink" title="5. 使用HTML5的window.postMessage方法跨域"></a>5. 使用HTML5的window.postMessage方法跨域</h2><p>window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。</p>
<p>借鉴了<a href="https://segmentfault.com/a/1190000000718840" target="_blank" rel="external">https://segmentfault.com/a/1190000000718840</a></p>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 跨域 </tag>
            
            <tag> 同源 </tag>
            
            <tag> CORS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-内存泄漏]]></title>
      <url>/2017/08/09/javascript-MemoryLeak/</url>
      <content type="html"><![CDATA[<h1 id="什么叫内存泄漏"><a href="#什么叫内存泄漏" class="headerlink" title="什么叫内存泄漏"></a>什么叫内存泄漏</h1><p>不再用到的内存，没有及时释放，就叫做内存泄漏。</p>
<h1 id="哪些操作会造成内存泄漏？"><a href="#哪些操作会造成内存泄漏？" class="headerlink" title="哪些操作会造成内存泄漏？"></a>哪些操作会造成内存泄漏？</h1><ul>
<li>setTimeout 的第一个参数使用字符串而非函数的话,会引发内存泄漏。</li>
<li>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时,就会产生一个循环）</li>
<li>全局变量引起的内存泄漏<br>解决办法： 使用严格模式’use strict’</li>
<li>DOM清空或删除，事件未清除导致的内存泄露</li>
<li>子元素存在引用引起的内存泄漏</li>
<li>被遗忘的计时器或回调函数<br>解决办法：removeEventListener()，现状的浏览器可以正确检测和处理循环引用。</li>
</ul>
<h1 id="javascript垃圾回收方法"><a href="#javascript垃圾回收方法" class="headerlink" title="javascript垃圾回收方法"></a>javascript垃圾回收方法</h1><ul>
<li>标记清除（mark and sweep）<br>这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。</li>
</ul>
<p>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了</p>
<ul>
<li>引用计数(reference counting)<br>在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-同步与异步(Ajax，promise)]]></title>
      <url>/2017/08/08/javascript-synchronization-asynchronism/</url>
      <content type="html"><![CDATA[<h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h1><p>代码依次执行。<br>脚本会停留并等待服务器发送回复然后再继续。</p>
<hr>
<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><p>脚本允许页面继续其进程并处理可能的回复</p>
<h2 id="setTimeout-与setInterval"><a href="#setTimeout-与setInterval" class="headerlink" title="setTimeout()与setInterval()"></a>setTimeout()与setInterval()</h2><p>setTimeout和setInterval可以改变一个队列函数的执行顺序.</p>
<hr>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>Ajax 是异步Javascript和XML，用于在Web页面中实现异步数据交互</p>
<h3 id="Ajax优点："><a href="#Ajax优点：" class="headerlink" title="Ajax优点："></a>Ajax优点：</h3><p>（1）使得页面不重载全部内容的情况下加载局部内容，降低数据传输量<br>（2）避免用户不断刷新或者跳转页面，提高用户体验</p>
<h3 id="Ajax过程"><a href="#Ajax过程" class="headerlink" title="Ajax过程"></a>Ajax过程</h3><p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.<br>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.<br>(3)设置响应HTTP请求状态变化的函数.<br>(4)发送HTTP请求.<br>(5)获取异步调用返回的数据.<br>(6)使用JavaScript和DOM实现局部刷新.</p>
<h3 id="Ajax原生js代码"><a href="#Ajax原生js代码" class="headerlink" title="Ajax原生js代码"></a>Ajax原生js代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> xmlhttp; <span class="comment">// 1.创建XMLHttpRequest对象</span></div><div class="line">	<span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  	xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  	xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">	xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>) &#123;</div><div class="line">    	<span class="built_in">document</span>.getElementById(<span class="string">'p1'</span>).innerHTML = xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">	xmlhttp.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</div><div class="line">	xmlhttp.send();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Ajax方法"><a href="#Ajax方法" class="headerlink" title="Ajax方法"></a>Ajax方法</h4><p>1.<code>open(method,url,async)</code><br>    规定请求类型、URL以及是否异步处理请求。</p>
<ul>
<li>method：请求的类型；GET 或 POST</li>
<li>url：文件在服务器上的位置</li>
<li>async：true（异步）或 false（同步）</li>
</ul>
<p>2.<code>send(string)</code><br>将请求发送到服务器。<br>string：仅用于 POST 请求</p>
<h4 id="Ajax请求中的get方式和post方式"><a href="#Ajax请求中的get方式和post方式" class="headerlink" title="Ajax请求中的get方式和post方式"></a>Ajax请求中的get方式和post方式</h4><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。<br>    GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符<br>  POST：一般用于修改服务器上的资源，对所发送的信息没有限制。<br>  Get是通过地址栏来传值，而Post是通过提交表单来传值。<br>    GET 请求保留在浏览器历史记录中<br>    GET 请求可被收藏为书签<br>然而，在以下情况中，请使用 POST 请求：</p>
<ul>
<li>无法使用缓存文件（更新服务器上的文件或数据库）</li>
<li>向服务器发送大量数据（POST 没有数据量限制）</li>
<li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>
</ul>
<p>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据。<br><code>setRequestHeader(header,value)</code>向请求添加 HTTP 头。<br>header: 规定头的名称<br>value: 规定头的值</p>
<h4 id="XMLHttpRequest响应"><a href="#XMLHttpRequest响应" class="headerlink" title="XMLHttpRequest响应"></a>XMLHttpRequest响应</h4><ul>
<li>responseText获得字符串形式的响应数据。</li>
<li>responseXML获得XML形式的响应数据。</li>
</ul>
<h4 id="XMLHttpRequest-onreadystatechange事件"><a href="#XMLHttpRequest-onreadystatechange事件" class="headerlink" title="XMLHttpRequest.onreadystatechange事件"></a>XMLHttpRequest.onreadystatechange事件</h4><p>每当 readyState 改变时，就会触发 onreadystatechange 事件。<br>readyState 属性存有 XMLHttpRequest 的状态信息。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>onreadystatechange</td>
<td style="text-align:left">存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td>
</tr>
<tr>
<td>readyState</td>
<td style="text-align:left">存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。<br> 0: 请求未初始化<br> 1: 服务器连接已建立<br> 2: 请求已接收<br> 3: 请求处理中<br> 4: 请求已完成，且响应已就绪</td>
</tr>
<tr>
<td>status</td>
<td style="text-align:left">200:”OK”<br> 404:未找到页面</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><h3 id="promise定义"><a href="#promise定义" class="headerlink" title="promise定义"></a>promise定义</h3><p>ES6 原生提供了 Promise 对象。<br>所谓 Promise，就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作）.<br>Promise 对象用来进行延迟(deferred) 和异步(asynchronous ) 计算。<br>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。<br>Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<h3 id="promise的特点"><a href="#promise的特点" class="headerlink" title="promise的特点"></a>promise的特点</h3><p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Fulfilled（已成功）和Rejected（已失败）。<br>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Fulfiled和从Pending变为Rejected。</p>
<h3 id="promise对象的使用"><a href="#promise对象的使用" class="headerlink" title="promise对象的使用"></a>promise对象的使用</h3><h4 id="promise的构造函数"><a href="#promise的构造函数" class="headerlink" title="promise的构造函数"></a>promise的构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)	&#123;</div><div class="line">		resolve(value);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">		reject(error);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。</p>
<ul>
<li>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 Pending 变为 Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</li>
<li>reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 Pending 变为 Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</li>
</ul>
<h4 id="promise实例的then-方法"><a href="#promise实例的then-方法" class="headerlink" title="promise实例的then()方法"></a>promise实例的then()方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line"> <span class="comment">// success</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line"> <span class="comment">// failure</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为Resolved时调用，第二个回调函数是Promise对象的状态变为Rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>
<h3 id="promise对象实现Ajax操作的例子"><a href="#promise对象实现Ajax操作的例子" class="headerlink" title="promise对象实现Ajax操作的例子"></a>promise对象实现Ajax操作的例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    client.open(<span class="string">"GET"</span>, url);</div><div class="line">    client.onreadystatechange = handler;</div><div class="line">    client.responseType = <span class="string">"json"</span>;</div><div class="line">    client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</div><div class="line">    client.send();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</div><div class="line">        resolve(<span class="keyword">this</span>.response);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> promise;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Contents: '</span> + json);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.error(<span class="string">'出错了'</span>, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> Ajax </tag>
            
            <tag> promise </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-正则表达式]]></title>
      <url>/2017/08/07/javascript-RegularExpression/</url>
      <content type="html"><![CDATA[<h1 id="用正则表达式验证邮箱格式"><a href="#用正则表达式验证邮箱格式" class="headerlink" title="用正则表达式验证邮箱格式"></a>用正则表达式验证邮箱格式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">emailAddress</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">'^[A-Za-z\d]+([-_.][A-Za-z\d]+)*@([A-Za-z\d]+[-.])+[A-Za-z\d]&#123;2,4&#125;'</span>;</div><div class="line">  <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(str); <span class="comment">//创建正则表达式对象</span></div><div class="line">  <span class="keyword">if</span>(str.test(emailAddress)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>正则表达式符号<br>^ 匹配一个输入或一行的开头，/^a/匹配”an A”，而不匹配”An a”<br>$ 匹配一个输入或一行的结尾，/a$/匹配”An a”，而不匹配”an A”<br>(x) 匹配x保存x在名为$1…$9的变量中<br>x|y 匹配x或y<br>{n} 精确匹配n次<br>{n,} 匹配n次以上<br>{n,m} 匹配n-m次<br>[xyz] 字符集(character set)，匹配这个集合中的任一一个字符(或元字符)<br>[^xyz] 不匹配这个集合中的任何一个字符<br>\w 匹配一个可以组成单词的字符，相当于[a-zA-Z0-9]，匹配大小写字母和数字</p>
</li>
<li><p>量词<br>* 匹配前面元字符0次或多次，/ba*/将匹配b,ba,baa,baaa<br>+ 匹配前面元字符1次或多次，/ba+/将匹配ba,baa,baaa<br>? 匹配前面元字符0次或1次，/ba？/将匹配b,ba</p>
</li>
<li>RegExp对象的方法<br><code>test()</code>:检索字符串中指定的值。返回 true 或 false。<br><code>exec()</code>检索字符串中指定的值。返回找到的值，并确定其位置。</li>
</ul>
<h1 id="用正则表达式验证URL"><a href="#用正则表达式验证URL" class="headerlink" title="用正则表达式验证URL"></a>用正则表达式验证URL</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^((https|http|ftp|rtsp|mms)?:\/\/)+[A-Za-z0<span class="number">-9</span>]+\.[A-Za-z0<span class="number">-9</span>]+[\/=\?%\-&amp;_~<span class="string">`@[\]\':+!]*([^&lt;&gt;\"\"])*</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Regular Expression </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-线程与进程]]></title>
      <url>/2017/08/07/javascript-thread-process/</url>
      <content type="html"><![CDATA[<p>一个程序至少有一个进程,一个进程至少有一个线程.</p>
<ul>
<li>进程（process）是一块包含了某些资源的内存区域。操作系统利用进程把它的工作划分为一些功能单元。进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。</li>
<li>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</li>
<li>多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 进程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-setTimeOut()与setInterval()]]></title>
      <url>/2017/08/07/javascript-setTimeOut-setInterval/</url>
      <content type="html"><![CDATA[<p>Javascript用来处理延时和定时任务的setTimeOut和setInterval函数应用非常广泛，它们都用来处理延时和定时任务，比如打开网页一段时间后弹出一个登录框，页面每隔一段时间发送异步请求获取最新数据等等。</p>
<h1 id="setTimeOut"><a href="#setTimeOut" class="headerlink" title="setTimeOut()"></a>setTimeOut()</h1><ul>
<li><code>setTimeout()</code> 方法用于在指定的毫秒数后调用函数或计算表达式</li>
<li><code>setTimeout()</code>只执行一次</li>
<li>第一个参数是要执行的code或句柄，第二个是延迟的毫秒数。</li>
<li>用法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timeoutID = <span class="built_in">window</span>.setTimeout(func, [delay, param1, param2, ...]);  <span class="keyword">var</span> timeoutID = <span class="built_in">window</span>.setTimeout(code, [delay]);</div></pre></td></tr></table></figure>
<ul>
<li><code>clearTimeOut()</code>函数用来清除定时器</li>
<li>实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(i);   </div><div class="line">  &#125;,<span class="number">0</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>输出4，4，4<br>原因：Javascript事件处理器在线程空闲之前不会运行。那么问题来了，如何让上述代码输出1 2 3？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</div><div class="line">   setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;  <span class="comment">//改成立即执行函数</span></div><div class="line">       <span class="built_in">console</span>.log(a);   </div><div class="line">   &#125;)(i),<span class="number">0</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h1><ul>
<li><code>setInterval()</code>是在每隔指定的毫秒数循环调用函数或表达式，直到<code>clearInterval()</code>把它清除</li>
<li>第一个参数是要执行的code或句柄，第二个是延迟的毫秒数。</li>
</ul>
<h2 id="写一个递归，每隔5秒调用自身，一共100次。"><a href="#写一个递归，每隔5秒调用自身，一共100次。" class="headerlink" title="写一个递归，每隔5秒调用自身，一共100次。"></a>写一个递归，每隔5秒调用自身，一共100次。</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">'test'</span>);</div><div class="line">  counter++;</div><div class="line">  <span class="keyword">if</span>(counter == <span class="number">100</span>) &#123;</div><div class="line">    clearInterval(timer);</div><div class="line">  &#125;</div><div class="line">&#125;,<span class="number">5000</span>);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> setTimeout() </tag>
            
            <tag> setInterval() </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-基本数据类型]]></title>
      <url>/2017/08/07/javascript-DataType/</url>
      <content type="html"><![CDATA[<h1 id="六种基本数据类型"><a href="#六种基本数据类型" class="headerlink" title="六种基本数据类型"></a>六种基本数据类型</h1><hr>
<ul>
<li>undefined: 一个未初始化的变量的值为undefined; 一个没有传入实参的形参变量的值为undefined; 如果一个函数什么都不返回,则该函数默认返回undefined;</li>
<li>null: 没有对象被呈现</li>
<li>string:</li>
<li>boolean:</li>
<li>number:</li>
<li>sysbol(ES6):</li>
</ul>
<h1 id="null与undefined的不同点"><a href="#null与undefined的不同点" class="headerlink" title="null与undefined的不同点"></a>null与undefined的不同点</h1><hr>
<ul>
<li>null是一个字面量（而不是全局对象的一个属性,undefined 是）;</li>
<li>null是一个表示”无”的对象, Number(null) == 0；undefined是一个表示”无”的原始值, Number(undefined) == NaN。</li>
<li>当声明的变量还未被初始化时,变量的默认值为undefined。</li>
<li>null用来表示尚未存在的对象,常用来表示函数企图返回一个不存在的对象。</li>
</ul>
<ol>
<li>undefined表示”缺少值”,就是此处应该有一个值,但是还没有定义。典型用法是：<br> （1）变量被声明了,但没有赋值时,就等于undefined。<br>（2） 调用函数时,应该提供的参数没有提供,该参数等于undefined。<br> （3）函数没有返回值时,默认返回undefined。<br> （4）对象没有赋值的属性,该属性的值为undefined。</li>
<li>null表示”没有对象”,即该处不应该有值。典型用法是：<br> （1） 作为函数的参数,表示该函数的参数不是对象。<br> （2） 作为对象原型链的终点。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> undefined </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-localsearch本地搜索]]></title>
      <url>/2017/08/07/hexo-localsearch/</url>
      <content type="html"><![CDATA[<ol>
<li>在git bash上输入<br><code>npm install hexo-generate-search –save</code></li>
<li>再安装<br><code>npm install hexo-generate-searchdb –save</code></li>
<li>在主题目录下的配置文件_config.yml中修改<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">local_search:</span></div><div class="line"><span class="symbol">  enable:</span> true <span class="comment">//改为true</span></div><div class="line">  <span class="meta"># <span class="meta-keyword">if</span> auto, trigger search by changing input</span></div><div class="line">  <span class="meta"># <span class="meta-keyword">if</span> manual, trigger search by pressing enter key or search button</span></div><div class="line"><span class="symbol">  trigger:</span> auto</div><div class="line">  <span class="meta"># show top n results per article, show all results by setting to -1</span></div><div class="line"><span class="symbol">  top_n_per_article:</span> <span class="number">1</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> hexo配置 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 本地搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-事件流，事件代理]]></title>
      <url>/2017/08/07/javascript-EventFlow/</url>
      <content type="html"><![CDATA[<h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><h2 id="事件流模型"><a href="#事件流模型" class="headerlink" title="事件流模型"></a>事件流模型</h2><p><strong>冒泡型事件流</strong>：事件的传播是从最特定的事件目标到最不特定的事件目标。即从DOM树的叶子到根。<br><strong>捕获型事件流</strong>：事件的传播是从最不特定的事件目标到最特定的事件目标。即从DOM树的根到叶子。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"outer"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">        Click me!</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>在冒泡型事件流click事件的传播顺序为：inner-&gt;outer-&gt;body-&gt;html-&gt;document</li>
<li>在捕获型事件流click事件的传播顺序为：document-&gt;html-&gt;body-&gt;outer-&gt;inner</li>
</ul>
<h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>DOM事件流采用捕获+冒泡。两种事件流都会触发DOM的所有对象，从document对象开始，也在document对象结束。<br><img src="http://images2015.cnblogs.com/blog/315302/201606/315302-20160621155328756-279009443.png" alt=""></p>
<ul>
<li>事件捕获阶段：实际目标在捕获阶段不会接收事件。也就是在捕获阶段。上图中为1~3.</li>
<li>处于目标阶段：事件上发生并处理。但是事件处理会被看成是冒泡阶段的一部分。</li>
<li>冒泡阶段：事件又传播回文档。</li>
</ul>
<p>在DOM事件流中，实际的目标inner在捕获阶段不会接受到事件。这意味着在捕获阶段，事件到outer就停止了，下一个阶段是“处于目标”阶段，于是事件在inner 上发生，并在事件处理中被看成是冒泡阶段的一部分。然后，冒泡阶段发生，事件又传播回文档。</p>
<p>DOM2级事件定义了两个方法用于处理置顶和删除事件处理程序的操作addEventListener()和removeEventListener()，所有DOM节点都包含这两个方法，并且它们都接受3个参数：要处理的事件名，作为事件处理的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序，反之则是在事件冒泡阶段处理程序。DOM2级方法添加事件处理程序的好处是可以添加多个事件处理程序，会按照添加顺序被处理（无论是捕获还是冒泡）。<br>而IE不同的它有自己的方法attachEvent()和detachEvent,这两个接受相同的两个参数：事件处理程序名称和事件处理程序函数。</p>
<p>DOM2级事件定义了两个方法用于处理置顶和删除事件处理程序的操作addEventListener()和removeEventListener()，所有DOM节点都包含这两个方法，并且它们都接受3个参数：要处理的事件名，作为事件处理的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序，反之则是在事件冒泡阶段处理程序。DOM2级方法添加事件处理程序的好处是可以添加多个事件处理程序，会按照添加顺序被处理（无论是捕获还是冒泡）。</p>
<h2 id="IE的事件流"><a href="#IE的事件流" class="headerlink" title="IE的事件流"></a>IE的事件流</h2><p>IE没有提供对事件捕获的支持，所以IE跟标准浏览器对DOM事件流实现不一样。<br>而IE不同的它有自己的方法attachEvent()和detachEvent,这两个接受相同的两个参数：事件处理程序名称和事件处理程序函数。</p>
<h2 id="添加和删除事件监听器："><a href="#添加和删除事件监听器：" class="headerlink" title="添加和删除事件监听器："></a>添加和删除事件监听器：</h2><p>w3c： <code>addEventListener/ removeEventListener()</code><br>IE: <code>attachEvent()/ detachEvent()</code></p>
<h2 id="事件监听："><a href="#事件监听：" class="headerlink" title="事件监听："></a>事件监听：</h2><p>IE事件监听器使用全局的Event对象，而w3c将event对象作为参数传递给监听器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>（<span class="title">event</span>）</span>&#123;</div><div class="line">   	event = event || <span class="built_in">window</span>.event;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="阻止冒泡："><a href="#阻止冒泡：" class="headerlink" title="阻止冒泡："></a>阻止冒泡：</h2><p>IE： e.cancelBubble=true;<br>w3c：e.stopPropagation();</p>
<h2 id="attachEvent-与addEventListener区别"><a href="#attachEvent-与addEventListener区别" class="headerlink" title="attachEvent 与addEventListener区别"></a>attachEvent 与addEventListener区别</h2><p>一、适应的浏览器版本不同<br>二、attachEvent中的事件带on，而addEventListener中的事件不带on<br>三、参数的个数不同<br>attachEvent()，只有冒泡；<br>addEventListener(事件名称,接收事件处理的函数,bool值) 默认为false，事件句柄在冒泡阶段执行，true在捕获阶段。</p>
<p>event.stopPropagation(); 支持FF=&gt; 停止传播<br>event.cancelBubble = true; 支持IE =&gt; 取消冒泡</p>
<h2 id="自动执行点击事件，兼容IE"><a href="#自动执行点击事件，兼容IE" class="headerlink" title="自动执行点击事件，兼容IE"></a>自动执行点击事件，兼容IE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'my-btn'</span>);</div><div class="line">  <span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.tagName);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (btn.addEventListener) &#123;</div><div class="line">    <span class="comment">// 调用的处理程序使用事件目标作为它们的this值</span></div><div class="line">    <span class="comment">// 此处也可以传递e事件：handler(e); e.target.tagName</span></div><div class="line">    btn.addEventListener(<span class="string">"click"</span>, handler, <span class="literal">false</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (btn.attachEvent) &#123;</div><div class="line">    <span class="comment">// 注册的处理程序作为函数调用，它们的this值是全局（window）对象</span></div><div class="line">    <span class="comment">// 此处也可以传递e事件：handler(e); e.srcElement.tagName</span></div><div class="line">    btn.attachEvent(<span class="string">"onclick"</span>, handler.call(btn));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</div><div class="line">    btn.click();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> evt = <span class="built_in">document</span>.createEvent(<span class="string">"MouseEvents"</span>);</div><div class="line">    evt.initEvent(<span class="string">"click"</span>, <span class="literal">true</span>, <span class="literal">true</span>);</div><div class="line">    btn.dispatchEvent(evt);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h1><h2 id="事件代理的原理"><a href="#事件代理的原理" class="headerlink" title="事件代理的原理"></a>事件代理的原理</h2><p>事件代理的原理用到的就是事件冒泡和目标元素，把事件处理器添加到父元素，等待子元素事件冒泡，并且父元素能够通过target（IE为srcElement）判断是哪个子元素，从而做相应处理。</p>
<ul>
<li>传统事件处理做法是为每个元素添加事件处理器。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"color-list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>red<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>orange<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>yellow<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>green<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>indigo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>purple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> colorList=<span class="built_in">document</span>.getElementById(<span class="string">"color-list"</span>);</div><div class="line">      <span class="keyword">var</span> colors=colorList.getElementsByTagName(<span class="string">"li"</span>);</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;colors.length;i++)</div><div class="line">      &#123;</div><div class="line">        colors[i].addEventListener(<span class="string">'click'</span>,showColor,<span class="literal">false</span>);</div><div class="line">      &#125;;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params">e</span>)</span></div><div class="line">      &#123;</div><div class="line">        e=e||<span class="built_in">window</span>.event;</div><div class="line">        <span class="keyword">var</span> targetElement=e.target||e.srcElement;</div><div class="line">        alert(targetElement.innerHTML);</div><div class="line">      &#125;</div><div class="line">    &#125;)();</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>事件代理的处理方式是：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"color-list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>red<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>orange<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>yellow<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>green<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>indigo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>purple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> colorList=<span class="built_in">document</span>.getElementById(<span class="string">"color-list"</span>);</div><div class="line">        colorList.addEventListener(<span class="string">'click'</span>,showColor,<span class="literal">false</span>);</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params">e</span>)</span></div><div class="line">        &#123;</div><div class="line">          e=e||<span class="built_in">window</span>.event;</div><div class="line">          <span class="keyword">var</span> targetElement=e.target||e.srcElement;</div><div class="line">          <span class="keyword">if</span>(targetElement.nodeName.toLowerCase()===<span class="string">"li"</span>)&#123;</div><div class="line">          alert(targetElement.innerHTML);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)();</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="事件代理的好处"><a href="#事件代理的好处" class="headerlink" title="事件代理的好处"></a>事件代理的好处</h2><ul>
<li>将多个事件处理器减少到一个，因为事件处理器要驻留内存，这样就提高了性能。</li>
<li>DOM更新无需重新绑定事件处理器，因为事件代理对不同子元素可采用不同处理方法。</li>
</ul>
<h2 id="事件代理的问题"><a href="#事件代理的问题" class="headerlink" title="事件代理的问题"></a>事件代理的问题</h2><p>事件代理同时绑定了li和span，当点击span的时候，li和span都会冒泡。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>li中的span的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">      alert(<span class="string">'li li'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'span'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">      alert(<span class="string">'li span'</span>);</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>解决办法：</p>
<ol>
<li>span的事件处理程序中阻止冒泡</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'span'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">  alert(<span class="string">'li span'</span>);</div><div class="line">  e.stopPropagation();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li>li的事件处理程序中检测target元素</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (e.target.nodeName == <span class="string">'SPAN'</span>) &#123;</div><div class="line">      e.stopPropagation();</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  alert(<span class="string">'li li'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 事件流 </tag>
            
            <tag> 事件代理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-数组-字符串方法]]></title>
      <url>/2017/08/06/javascript-Array-String/</url>
      <content type="html"><![CDATA[<h1 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h1><hr>
<h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a><code>concat()</code></h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>  用于连接两个或多个数组，返回被连接的数组。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>  arrayObject.concat(arrayX,arrayY)</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];　arr.concat(arr2);<span class="comment">//['A','B','C','D',1,2,3],arr并没有被修改</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a><code>pop()</code></h2><h3 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h3><p>  删除并返回最后一个元素</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>  arrayObject.pop()</p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">arr.pop();<span class="comment">//arr=['A','B']</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="push"><a href="#push" class="headerlink" title="push()"></a><code>push()</code></h2><h3 id="用途-2"><a href="#用途-2" class="headerlink" title="用途"></a>用途</h3><p>  向数组尾部添加一个或更多元素，返回新的长度。</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>  arrayObject.push(elment1,element2…)</p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">arr.push(<span class="string">'J'</span>,<span class="string">'K'</span>);<span class="comment">//['A','B','C','J','K']</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="shift"><a href="#shift" class="headerlink" title="shift()"></a><code>shift()</code></h2><h3 id="用途-3"><a href="#用途-3" class="headerlink" title="用途"></a>用途</h3><p>  删除并返回数组的第一个元素</p>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">arr.shift();<span class="comment">//['B','C']</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a><code>slice()</code></h2><h3 id="用途-4"><a href="#用途-4" class="headerlink" title="用途"></a>用途</h3><p>  截取数组的部分长度，然后返回新的数组</p>
<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr.slice(<span class="number">0</span>,<span class="number">2</span>);<span class="comment">//从开始索引0开始，到结束索引结束，但不包括结束索引，['A','B']</span></div><div class="line"></div><div class="line">arr.slice(<span class="number">2</span>);<span class="comment">//从开始到结束，['D']</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a><code>splice()</code></h2><h3 id="用途-5"><a href="#用途-5" class="headerlink" title="用途"></a>用途</h3><p>  向/从数组中添加/删除项目，然后返回被删除的项目，会改变原始数组</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>  arrayObject.splice(index,howmany,item1,item2…)</p>
<h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>); <span class="comment">// arr=[1,2,6,3,4,5]在下标为2的位置上添加，0表示添加，返回[]</span></div><div class="line"></div><div class="line">arr.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>);<span class="comment">// arr=[1,2,7,3,4,5]在下标为2的位置上删除该元素并替换成7，1代表删除，返回[6]</span></div><div class="line">arr.splice(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">//arr=[1,4,5],返回被删除的元素[2,7,3]</span></div><div class="line">arr.splice(<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>);<span class="comment">//arr=[1,6,8]，返回被删除的元素[4,5]</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a><code>unshift()</code></h2><h3 id="用途-6"><a href="#用途-6" class="headerlink" title="用途"></a>用途</h3><p>  向数组头部添加一个或更多元素，并返回新的长度。</p>
<h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.unshift(<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//返回新长度3，arr=[6,7,1,2,3,4,5]</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a><code>indexOf()</code></h2><h3 id="用途-7"><a href="#用途-7" class="headerlink" title="用途"></a>用途</h3><p>  搜索一个指定元素的位置</p>
<h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.indexOf(<span class="number">2</span>); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a><code>forEach()</code></h2><h3 id="用途-8"><a href="#用途-8" class="headerlink" title="用途"></a>用途</h3><p>对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；第对应的数组索引，数组本身。</p>
<h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x, index, a</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x + <span class="string">'|'</span> + index + <span class="string">'|'</span> + (a === arr));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 输出为：</span></div><div class="line"><span class="comment">// 1|0|true</span></div><div class="line"><span class="comment">// 2|1|true</span></div><div class="line"><span class="comment">// 3|2|true</span></div><div class="line"><span class="comment">// 4|3|true</span></div><div class="line"><span class="comment">// 5|4|true</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="map"><a href="#map" class="headerlink" title="map()"></a><code>map()</code></h2><h3 id="用途-9"><a href="#用途-9" class="headerlink" title="用途"></a>用途</h3><p>指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</p>
<h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> item*item;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[1, 4, 9, 16, 25]</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><hr>
<h2 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a><code>charAt()</code></h2><h3 id="用途-10"><a href="#用途-10" class="headerlink" title="用途"></a>用途</h3><p>  返回在指定位置的字符</p>
<h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'abcdef'</span>;</div><div class="line">s.charAt(<span class="number">3</span>);<span class="comment">// d</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="indexOf-1"><a href="#indexOf-1" class="headerlink" title="indexOf()"></a><code>indexOf()</code></h2><h3 id="用途-11"><a href="#用途-11" class="headerlink" title="用途"></a>用途</h3><p>  返回String对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。</p>
<h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><p>  strObj.indexOf(substr[,startIndex])</p>
<h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"ABCDECDF"</span>;</div><div class="line">str.indexOf(<span class="string">"CD"</span>，<span class="number">1</span>); <span class="comment">// 由1位置从左向右查找 123... 返回2</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="slice-1"><a href="#slice-1" class="headerlink" title="slice()"></a><code>slice()</code></h2><h3 id="用途-12"><a href="#用途-12" class="headerlink" title="用途"></a>用途</h3><p>  返回字符串片段。</p>
<h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><p>strObj.slice(start[,end])<br>start下标从0开始的strObj指定部分其实索引。如果start为负，将它作为length+start处理，此处length为字符串的长度。<br>end下标从0开始的strObj指定部分结束索引。如果end为负，将它作为length+end处理，此处length为字符串的长度。</p>
<h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"ABCDEF"</span>;</div><div class="line">str.slice(<span class="number">2</span>,<span class="number">4</span>); <span class="comment">//第2个参数为&lt;end的下标，返回CD</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="split"><a href="#split" class="headerlink" title="split()"></a><code>split()</code></h2><h3 id="用途-13"><a href="#用途-13" class="headerlink" title="用途"></a>用途</h3><p>  把一个字符串分割成字符串数组</p>
<h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><p>stringObject.split(separator,howmany)</p>
<h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"How are you doing today?"</span></div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="string">" "</span>)); <span class="comment">// How,are,you,doing,today?</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="substr"><a href="#substr" class="headerlink" title="substr()"></a><code>substr()</code></h2><h3 id="用途-14"><a href="#用途-14" class="headerlink" title="用途"></a>用途</h3><p>抽取从 start 下标开始的指定数目的字符</p>
<h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><p>stringObject.substr(start,length)</p>
<h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"hello world"</span>;</div><div class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>,<span class="number">4</span>));<span class="comment">// lo w</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="substring"><a href="#substring" class="headerlink" title="substring()"></a><code>substring()</code></h2><h3 id="用途-15"><a href="#用途-15" class="headerlink" title="用途"></a>用途</h3><p>提取字符串中介于两个指定下标之间的字符。</p>
<h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><p>stringObject.substring(start,stop)</p>
<h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"hello world"</span>;</div><div class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>,<span class="number">5</span>));<span class="comment">// lo</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-New关键字]]></title>
      <url>/2017/08/06/javascript-New/</url>
      <content type="html"><![CDATA[<p>new操作符具体干了什么呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面这段代码模拟了new操作符(实例化对象)的内部过程</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> o=&#123;&#125;;<span class="comment">// (1)</span></div><div class="line">  o.__proto__=Person.prototype;  <span class="comment">//(2)原型继承</span></div><div class="line">  Person.call(o,name);<span class="comment">// (3)</span></div><div class="line">  <span class="keyword">return</span> o;<span class="comment">// (4)</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> personB=person(<span class="string">"xl"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(personB.name);  <span class="comment">// 输出  xl</span></div></pre></td></tr></table></figure></p>
<p>(1)新建一个空对象o；<br>(2)设置原型链，将o的__proto__指向Person.prototype,完成对Person的原型对象的属性和方法的继承；<br>(3)让Person中的this指向o；<br>(4)返回对象o。<br>此时调用person()函数就相当于new Person()。</p>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> new </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-This关键字]]></title>
      <url>/2017/08/06/javascript-This/</url>
      <content type="html"><![CDATA[<p><strong>谁调用这样函数或方法，this关键字就指向谁。</strong><br>在JS中，函数调用的方式有</p>
<ul>
<li>普通函数调用</li>
<li>作为方法来调用</li>
<li>作为构造函数调用</li>
<li>使用apply/call方法来调用</li>
<li>Function.prototype.bind()方法</li>
<li>es6箭头函数</li>
</ul>
<h1 id="普通函数调用"><a href="#普通函数调用" class="headerlink" title="普通函数调用"></a>普通函数调用</h1><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.name=<span class="string">"xl"</span>;</div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">person();  <span class="comment">//输出  window  xl</span></div></pre></td></tr></table></figure>
<p>相当于person()作为全局变量window的一个方法来调用，相当于window.person()，所以this志向window.</p>
<h1 id="作为方法来调用"><a href="#作为方法来调用" class="headerlink" title="作为方法来调用"></a>作为方法来调用</h1><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name=<span class="string">"XL"</span>;</div><div class="line"><span class="keyword">var</span> person=&#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">"xl"</span>,</div><div class="line">    <span class="attr">showName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">person.showName();  <span class="comment">//输出  xl</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> showNameA=person.showName;</div><div class="line">showNameA();    <span class="comment">//输出  XL</span></div></pre></td></tr></table></figure>
<p>1.这里是person对象调用showName方法，很显然this关键字是指向person对象的，所以会输出”Xl”.<br>2.这里将person.showName方法赋给showNameA变量，此时showNameA变量相当于window对象的一个属性，因此showNameA()执行的时候相当于window.showNameA(),即window对象调用showNameA这个方法，所以this关键字指向window.</p>
<h1 id="作为构造函数来调用"><a href="#作为构造函数来调用" class="headerlink" title="作为构造函数来调用"></a>作为构造函数来调用</h1><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name=name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> personA=Person(<span class="string">"xl"</span>);</div><div class="line"><span class="built_in">console</span>.log(personA.name); <span class="comment">// 输出  undefined</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name);<span class="comment">//输出  xl</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> personB=<span class="keyword">new</span> Person(<span class="string">"xl"</span>);</div><div class="line"><span class="built_in">console</span>.log(personB.name);<span class="comment">// 输出 xl</span></div><div class="line"><span class="comment">//这部分代码的解释见下</span></div></pre></td></tr></table></figure>
<p>1.上面代码没有进行new操作，相当于window对象调用Person(“xl”)方法，那么this指向window对象，并进行赋值操作window.name=”xl”.</p>
<h2 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面这段代码模拟了new操作符(实例化对象)的内部过程</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> o=&#123;&#125;;</div><div class="line">  o.__proto__=Person.prototype;  <span class="comment">//原型继承</span></div><div class="line">  Person.call(o,name);</div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> personB=person(<span class="string">"xl"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(personB.name);  <span class="comment">// 输出  xl</span></div></pre></td></tr></table></figure>
<p>1.首先在person里创建空对象o，将o的__proto__指向Person.prototype,完成对Person的原型对象的属性和方法的继承；<br>2.Person.call(o,name)表示将Person对象中的this指向o，即o.name=name;<br>3.返回对象o。</p>
<h1 id="call-apply方法的调用"><a href="#call-apply方法的调用" class="headerlink" title="call/apply方法的调用"></a>call/apply方法的调用</h1><hr>
<p><strong>call/apply方法最大的作用就是改变this的指向。</strong><br>Obj.method.apply(AnotherObj,arguments);<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name=<span class="string">"XL"</span>;</div><div class="line"><span class="keyword">var</span> Person=&#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">"xl"</span>,</div><div class="line">    <span class="attr">showName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Person.showName.call(); <span class="comment">//输出 "XL"</span></div><div class="line">Person.showName();<span class="comment">// 输出“Xl”</span></div></pre></td></tr></table></figure></p>
<p>call()不带参数是指向window，若带参数，this指向第一个参数。</p>
<h1 id="Function-prototype-bind-方法"><a href="#Function-prototype-bind-方法" class="headerlink" title="Function.prototype.bind()方法"></a>Function.prototype.bind()方法</h1><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name=<span class="string">"XL"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name=name;</div><div class="line">  <span class="keyword">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"my name is "</span>+<span class="keyword">this</span>.name);</div><div class="line">    &#125;,<span class="number">50</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">"xl"</span>);</div><div class="line">person.sayName()  <span class="comment">//输出  “my name is XL”;</span></div></pre></td></tr></table></figure>
<p>setTimeout()定时函数,相当于window.setTimeout(),由window这个全局对象对调用,因此this的指向为window, 则this.name则为XL<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name=<span class="string">"XL"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">        <span class="keyword">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"my name is "</span>+<span class="keyword">this</span>.name);</div><div class="line">            &#125;.bind(<span class="keyword">this</span>),<span class="number">50</span>)  <span class="comment">//注意这个地方使用的bind()方法，绑定setTimeout里面的匿名函数的this一直指向Person对象</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">"xl"</span>);</div><div class="line">    person.sayName(); <span class="comment">//输出 “my name is xl”;</span></div></pre></td></tr></table></figure></p>
<p>这里setTimeout(function(){console.log(this.name)}.bind(this),50);,匿名函数使用bind(this)方法后创建了新的函数，这个新的函数不管在什么地方执行，this都指向的Person,而非window,因此最后的输出为”my name is xl”而不是”my name is XL”</p>
<p><em>setTimeout/setInterval/匿名函数执行的时候，this默认指向window对象，除非手动改变this的指向。<br>函数中的this的值，在非严格模式下是指向window对象，在严格模式下是指向undefined</em></p>
<h1 id="Eval-函数"><a href="#Eval-函数" class="headerlink" title="Eval()函数"></a>Eval()函数</h1><hr>
<p>该函数执行时，this绑定到当前作用域的对象上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name=<span class="string">"XL"</span>;</div><div class="line"><span class="keyword">var</span> person=&#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">"xl"</span>,</div><div class="line">    <span class="attr">showName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">eval</span>(<span class="string">"console.log(this.name)"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">person.showName();  <span class="comment">//输出  "xl"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a=person.showName;</div><div class="line">a();  <span class="comment">//输出  "XL"</span></div></pre></td></tr></table></figure></p>
<h1 id="es6箭头函数"><a href="#es6箭头函数" class="headerlink" title="es6箭头函数"></a>es6箭头函数</h1><hr>
<p><em>箭头函数的 this 始终指向函数定义时的 this，而非执行时。</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    <span class="attr">x</span> : <span class="number">1</span>,</div><div class="line">    <span class="attr">func</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.x) &#125;,</div><div class="line">    <span class="attr">test</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">this</span>.func() &#125;, <span class="number">100</span>);</div><div class="line">        <span class="comment">// this指向o</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">o.test();<span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<p>借鉴了[<a href="https://segmentfault.com/a/1190000003046071" target="_blank" rel="external">https://segmentfault.com/a/1190000003046071</a>]</p>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-继承]]></title>
      <url>/2017/08/05/javascript-Inherit/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><hr>
<h1 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h1><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><hr>
<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>为了让子类继承父类的属性，首先需要定义一个构造函数。然后将父类的新实例赋值给构造函数的原型对象。</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = <span class="string">'mike'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = <span class="number">12</span>;</div><div class="line">    &#125;</div><div class="line">    Child.prototype = <span class="keyword">new</span> Parent();<span class="comment">//Child继承Parent，通过原型，形成链条，核心代码</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> test = <span class="keyword">new</span> Child();</div><div class="line">    alert(test.age);</div><div class="line">    alert(test.name);<span class="comment">//得到被继承的属性</span></div><div class="line">    alert(test <span class="keyword">instanceof</span> Child); <span class="comment">//确定原型对象和实例的关系。</span></div></pre></td></tr></table></figure>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>非常纯粹的继承关系，实例是子类的实例，也是父类的实例；</li>
<li>父类新增原型方法/属性，子类能访问到；</li>
<li>简单，易于实现。</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>想为子类新增方法和属性，必须在 new Parent()这样的语句之后执行，不能放到构造函数中；</li>
<li>无法实现多继承；</li>
<li>来自原型对象的引用属性是所有实例共享的；（致命）</li>
<li>创建子类实例时，无法向父类构造函数传参。（致命）</li>
</ol>
<h2 id="构造继承"><a href="#构造继承" class="headerlink" title="构造继承"></a>构造继承</h2><hr>
<h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><p>在子类构造函数的内部调用超类的构造函数，通过call()和apply()方法可以在创建的对象上执行构造函数。（没用到原型）</p>
<h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  SuperType.call(<span class="keyword">this</span>);<span class="comment">//继承了SuperType，核心代码</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</div><div class="line">instance1.colors.push(<span class="string">"black"</span>);</div><div class="line"><span class="built_in">console</span>.log(instance1.colors);<span class="comment">//"red","blue","green","black"</span></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</div><div class="line"><span class="built_in">console</span>.log(instance2.colors);<span class="comment">//"red","blue","green"</span></div></pre></td></tr></table></figure>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol>
<li>解决了原型链继承中，子类实例共享父类引用的属性问题；</li>
<li>创建子类型时，可以向父类传递参数；</li>
<li>可以实现多继承</li>
</ol>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>实例并不是父类的实例，只是子类的实例；</li>
<li>只能继承父类实例的属性和方法，不能继承原型对象的属性和方法；（没有用到原型链）</li>
<li>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能。（致命，原型链可复用）</li>
</ol>
<h2 id="组合继承（最常用）"><a href="#组合继承（最常用）" class="headerlink" title="组合继承（最常用）"></a>组合继承（最常用）</h2><hr>
<h3 id="思想-2"><a href="#思想-2" class="headerlink" title="思想"></a>思想</h3><p>使用原型链实现对原型属性和方法的继承，使用构造函数来实现对实例属性的继承。这样既通过在原型上定义方法实现了函数复用，又保证每个实例都有自己的属性。通过Super.call(this);继承父类的基本属性和引用属性并保留能传参的优点；通过Sub.prototype = new Super();继承父类函数，实现函数复用。</p>
<h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</div><div class="line">&#125;</div><div class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">co  nsole.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  SuperType.call(<span class="keyword">this</span>,name);<span class="comment">//使用构造函数继承属性，核心代码</span></div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"><span class="comment">//继承方法</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();<span class="comment">// 使用原型链继承原型对象的</span></div><div class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"EvanChen"</span>,<span class="number">18</span>);</div><div class="line">instance1.colors.push(<span class="string">"black"</span>);</div><div class="line"><span class="built_in">console</span>.log(instance1.colors);<span class="comment">//"red","blue","green","black"</span></div><div class="line">instance1.sayName();<span class="comment">//"EvanChen"</span></div><div class="line">instance1.sayAge();<span class="comment">//18</span></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">"EvanChen666"</span>,<span class="number">20</span>);</div><div class="line"><span class="built_in">console</span>.log(instance2.colors);<span class="comment">//"red","blue","green"</span></div><div class="line">instance2.sayName();<span class="comment">//"EvanChen666"</span></div><div class="line">instance2.sayAge();<span class="comment">//20</span></div></pre></td></tr></table></figure>
<h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ol>
<li>不存在引用属性共享问题</li>
<li>可传参给父对象</li>
<li>函数可复用</li>
</ol>
<h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><p>  父类的构造函数被引用了两次</p>
<h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><hr>
<h3 id="思想-3"><a href="#思想-3" class="headerlink" title="思想"></a>思想</h3><p> 继承借助原型并基于已有的对象创建新对象，同时还不用创建自定义类型的方式。</p>
<h3 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 核心模块</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">   F.prototype = o;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> box = &#123;</div><div class="line">  <span class="attr">name</span> : <span class="string">'trigkit4'</span>,</div><div class="line">  <span class="attr">arr</span> : [<span class="string">'brother'</span>,<span class="string">'sister'</span>,<span class="string">'baba'</span>]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> b1 = obj(box);</div><div class="line">alert(b1.name);<span class="comment">//trigkit4</span></div><div class="line"></div><div class="line">b1.name = <span class="string">'mike'</span>;</div><div class="line">alert(b1.name);<span class="comment">//mike</span></div><div class="line"></div><div class="line">alert(b1.arr);<span class="comment">//brother,sister,baba</span></div><div class="line">b1.arr.push(<span class="string">'parents'</span>);</div><div class="line">alert(b1.arr);<span class="comment">//brother,sister,baba,parents</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> b2 = obj(box);</div><div class="line">alert(b2.name);<span class="comment">//trigkit4</span></div><div class="line">alert(b2.arr);<span class="comment">//brother,sister,baba,parents</span></div></pre></td></tr></table></figure>
<h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><p>从已有对象衍生新对象不需要创建自定义类型</p>
<h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>原型引用属性会被所有实例共享，因为是用整个父类对象来充当子类的原型对象。</li>
<li>无法实现代码复用</li>
</ol>
<h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><hr>
<h3 id="思想-4"><a href="#思想-4" class="headerlink" title="思想"></a>思想</h3><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真正是它做了所有工作一样返回对象。<br>创建新对象-&gt;增强-&gt;返回该对象</p>
<h2 id="寄生组合式继承（最完美）"><a href="#寄生组合式继承（最完美）" class="headerlink" title="寄生组合式继承（最完美）"></a>寄生组合式继承（最完美）</h2><hr>
<h3 id="思想-5"><a href="#思想-5" class="headerlink" title="思想"></a>思想</h3><p>通过寄生方式，去掉父类的实例属性，这样，在调用两次父类的构造函数时，就不会初始化两次实例方法/属性，避免组合继承的缺点。</p>
<h3 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原型式继承代码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">       <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">       F.prototype = o;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">   &#125;</div><div class="line"> <span class="comment">// 创建对象-&gt;增强对象-&gt;返回对象，核心代码</span></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">parent,child</span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> f = obj(parent.prototype);<span class="comment">//创建对象</span></div><div class="line">       f.constructor = child;<span class="comment">//增强对象</span></div><div class="line">   child.prototype = f;</div><div class="line">   <span class="keyword">return</span> f;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.name = name;</div><div class="line">       <span class="keyword">this</span>.arr = [<span class="string">'brother'</span>,<span class="string">'sister'</span>,<span class="string">'parents'</span>];</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   Parent.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">       Parent.call(<span class="keyword">this</span>,name);<span class="comment">//构造函数</span></div><div class="line">       <span class="keyword">this</span>.age =age;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   create(Parent,Child);<span class="comment">//通过这里实现继承</span></div><div class="line"></div><div class="line">   <span class="keyword">var</span> test = <span class="keyword">new</span> Child(<span class="string">'trigkit4'</span>,<span class="number">21</span>);</div><div class="line">   test.arr.push(<span class="string">'nephew'</span>);</div><div class="line">   <span class="built_in">console</span>.log(test.arr);<span class="comment">//["brother", "sister", "parents", "nephew"]</span></div><div class="line"> <span class="built_in">console</span>.log(test.age);<span class="comment">// 21</span></div><div class="line">   <span class="built_in">console</span>.log(test.run());<span class="comment">//trigkit4</span></div><div class="line"></div><div class="line">   <span class="keyword">var</span> test2 = <span class="keyword">new</span> Child(<span class="string">'jack'</span>,<span class="number">22</span>);</div><div class="line"> <span class="built_in">console</span>.log(test2.age);<span class="comment">// 22</span></div><div class="line">   <span class="built_in">console</span>.log(test2.arr);<span class="comment">//["brother", "sister", "parents"]</span></div></pre></td></tr></table></figure>
<h3 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h3><p>完美</p>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 继承 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-原型链]]></title>
      <url>/2017/08/05/javascript-Prototype/</url>
      <content type="html"><![CDATA[<h1 id="普通对象与函数对象"><a href="#普通对象与函数对象" class="headerlink" title="普通对象与函数对象"></a>普通对象与函数对象</h1><hr>
<p>  凡是通过new Function()创建的对象都是函数对象，其他的都是普通对象。</p>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><hr>
<p>  实例的属性（constructor）指向构造函数。</p>
<h1 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h1><hr>
<p>  函数对象(构造函数)都有prototype属性，指向函数的原型对象。<br><em>每个对象都有__proto__属性，但只有函数对象才有prototype。</em></p>
<blockquote>
<p>在默认情况下，所有的原型对象都会自动获得一个constructor（构造函数）属性，这个属性指向prototype属性所在的函数（Person）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person.prototype.constructor == Person;</div><div class="line">person1.constructor == Person;</div></pre></td></tr></table></figure>
<p><em>原型对象（Person.prototype）是构造函数（Person）的一个实例。</em><br>原型对象是用来继承的。</p>
<h1 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h1><hr>
<p><em>对象都有__proto__的内置属性，指向创建它的构造函数的原型对象。</em><br><strong>person1.__proto__== Person.protoype</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">b.constructor === <span class="built_in">Array</span>;</div><div class="line">b.__proto__ === <span class="built_in">Array</span>.prototype;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">c.constructor === <span class="built_in">Date</span>;</div><div class="line">c.__proto__ === <span class="built_in">Date</span>.prototype;</div><div class="line"></div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line">d.constructor === <span class="built_in">Function</span>;</div><div class="line">d.__proto__ === <span class="built_in">Function</span>.prototype;</div></pre></td></tr></table></figure></p>
<p><strong>所有函数对象的__proto__都指向Function.prototype，它是一个空函数。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></div><div class="line"><span class="built_in">Number</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">Boolean</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line"><span class="built_in">Boolean</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">String</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></div><div class="line"><span class="built_in">String</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="comment">// 所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身</span></div><div class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></div><div class="line"><span class="built_in">Object</span>.constructor == <span class="built_in">Function</span> <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身</span></div><div class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line"><span class="built_in">Function</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.__proto__ === <span class="built_in">Function</span>.prototype   <span class="comment">// true</span></div><div class="line"><span class="built_in">Array</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">RegExp</span>.__proto__ === <span class="built_in">Function</span>.prototype  <span class="comment">// true</span></div><div class="line"><span class="built_in">RegExp</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">Error</span>.__proto__ === <span class="built_in">Function</span>.prototype   <span class="comment">// true</span></div><div class="line"><span class="built_in">Error</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>.__proto__ === <span class="built_in">Function</span>.prototype    <span class="comment">// true</span></div><div class="line"><span class="built_in">Date</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>Math和JSON无需new<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.__proto__ === <span class="built_in">Object</span>.prototype  <span class="comment">// true</span></div><div class="line"><span class="built_in">Math</span>.construrctor == <span class="built_in">Object</span> <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">JSON</span>.__proto__ === <span class="built_in">Object</span>.prototype  <span class="comment">// true</span></div><div class="line"><span class="built_in">JSON</span>.construrctor == <span class="built_in">Object</span> <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身。所有构造器都继承了Function.prototype的属性及方法。如length、call、apply、bind。<br><strong>Function.prototype是唯一一个typeof XXX.prototye为function的prototype，其它的构造器的prototype都是object</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>  <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h1 id="原型链的基本思路"><a href="#原型链的基本思路" class="headerlink" title="原型链的基本思路"></a>原型链的基本思路</h1><hr>
<p>利用原型让引用类型继承另一个引用类型的属性和方法。<br>每隔构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针（construrctor），而实例对象都包含一个指向源性对象的内部指针(__proto__)，如果让原型对象等于另一个类型的实例，此时的原型对象将包含另一个原型的指针(__proto__)，另一个原型也包含着一个指向另一个构造函数的指针（construrctor），构成了实例和原型的链条。<br>  <img src="http://img.blog.csdn.net/20161006191631510?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="Alt text"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr>
<ol>
<li>所有函数对象的__proto__都指向Function.prototype，是一个空函数。</li>
<li>所有对象的__proto__都指向其构造函数的prototype。</li>
<li>每个对象都有construrctor属性，指向构造函数。</li>
<li>person1.__proto__==Person.protype==person1.construrctor.prototype</li>
<li>Object.prototype.__proto__ == null</li>
<li><strong>原型链存在于实例和构造函数的原型对象之间，即 person1.__proto__ == Person.prototype</strong></li>
</ol>
<p>本文借鉴了<br>[<a href="http://www.jianshu.com/p/dee9f8b14771]，" target="_blank" rel="external">http://www.jianshu.com/p/dee9f8b14771]，</a><br><a href="http://blog.csdn.net/sinat_21274091/article/details/52741788" target="_blank" rel="external">http://blog.csdn.net/sinat_21274091/article/details/52741788</a></p>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 原型链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-作用域链]]></title>
      <url>/2017/08/05/javascript-Scope/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>  <strong>作用域</strong>：是一个“地盘”，一个抽象概念，其中没有变量，要通过作用域对应的执行上下文环境来获取变量的值。同一个作用域下，不同的调用会产生不同的执行上下文环境，继而产生不同的变量的值。作用域中变量的值是执行过程中产生的确定的，而作用域是在函数创建时就确定了。<br>  要查询一个作用域下某个变量的值，就需要找到这个作用域对应的执行上下文环境，再在其中寻找变量的值。<br>  <em>作用域最大的用处就是隔离变量，不同作用域下同名变量不会又冲突。</em></p>
<h1 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scope=<span class="string">"global"</span>;  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(scope);  <span class="comment">// undefined</span></div><div class="line">    <span class="keyword">var</span> scope=<span class="string">"local"</span>  </div><div class="line">    <span class="built_in">console</span>.log(scope);  <span class="comment">// "local"</span></div><div class="line">&#125;  </div><div class="line">t();</div></pre></td></tr></table></figure>
<p>javascript没有块级作用域，有函数作用域<br><strong>函数作用域</strong>:变量在声明它们的函数体以及这个函数嵌套的任意函数体内都是有定义的。<br>javascript没有块级作用域，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name=<span class="string">"global"</span>;  </div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;  </div><div class="line">    <span class="keyword">var</span> name=<span class="string">"local"</span>;  </div><div class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// "local"  </span></div><div class="line">&#125;  </div><div class="line"><span class="built_in">console</span>.log(name); <span class="comment">// "local"</span></div></pre></td></tr></table></figure></p>
<h1 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h1><p>  <strong>作用域链</strong>：作用域链的创建是在执行上下文生命周期的创建时建立的。作用域链是当前环境与上层环境的一系列变量对象组成，它保证了当前执行环境对符合访问权限的变量和函数的有序访问。</p>
<h1 id="简述作用域链"><a href="#简述作用域链" class="headerlink" title="简述作用域链"></a>简述作用域链</h1><ol>
<li>引入一大段话来解释：<br>每一段js代码（全局代码或函数）都有一个与之关联的作用域链（scope chain）。<br>这个作用域链是一个对象列表或者链表，这组对象定义了这段代码中“作用域中”的变量。<br>当js需要查找变量x的值的时候（这个过程称为变量解析（variable resolution）），它会从链的第一个对象开始查找，如果这个对象有一个名为x的属性，则会直接使用这个属性的值，如果第一个对象中没有名为x的属性，js会继续查找链上的下一个对象。如果第二个对象依然没有名为x的属性，则会继续查找下一个，以此类推。如果作用域链上没有任何一个对象含有属性x，那么就认为这段代码的作用域链上不存在x，并最终抛出一个引用错误（ReferenceError）异常。</li>
<li>作用域链举例：<br>在js最顶层代码中（也就是不包括任何函数定义内的代码），作用域链由一个全局对象组成。<br>在不包含嵌套的函数体内，作用域链上有两个对象，第一个是定义函数参数和局部变量的对象，第二个是全局对象。<br>在一个嵌套的函数体内，作用域上至少有三个对象。</li>
<li>作用域链创建规则：<br>当定义一个函数时（注意，是定义的时候就开始了），它实际上保存一个作用域链。<br>当调用这个函数时，它创建一个新的对象来储存它的参数或局部变量，并将这个对象添加保存至那个作用域链上，同时创建一个新的更长的表示函数调用作用域的“链”。<br>对于嵌套函数来说，情况又有所变化：每次调用外部函数的时候，内部函数又会重新定义一遍。因为每次调用外部函数的时候，作用域链都是不同的。内部函数在每次定义的时候都要微妙的差别—在每次调用外部函数时，内部函数的代码都是相同的，而且关联这段代码的作用域链也不相同。</li>
</ol>
<p>可参考[<a href="http://blog.csdn.net/yueguanghaidao/article/details/9568071" target="_blank" rel="external">http://blog.csdn.net/yueguanghaidao/article/details/9568071</a>],</p>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 作用域链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-闭包]]></title>
      <url>/2017/08/04/javascript-Closure/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>闭包</strong>：有权访问另一个函数作用域中的变量的函数。<br>  在javascript语言中，只有函数内部的子函数才能读取局部变量，所以闭包也可以理解为“定义在一个函数内部的函数”。<br>    闭包是连接函数内部和外部的联系。<br>    javascript的链式作用域结构，子对象会一级一级地向上寻找所有父对象的变量。所以父对象的所有变量对子对象是可见的。</p>
<h1 id="闭包实例"><a href="#闭包实例" class="headerlink" title="闭包实例"></a>闭包实例</h1><p>将内部函数作为返回值，就可访问函数内的变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　alert(n);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> result=f1();</div><div class="line">　　result(); <span class="comment">// 999</span></div></pre></td></tr></table></figure></p>
<h1 id="闭包的用处"><a href="#闭包的用处" class="headerlink" title="闭包的用处"></a>闭包的用处</h1><ol>
<li>可以读取函数内部的变量；</li>
<li>让函数内部的变量的值保持在内存中。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　alert(n);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> result=f1();</div><div class="line">　　result(); <span class="comment">// 999</span></div><div class="line">　　nAdd();</div><div class="line">　　result(); <span class="comment">// 1000</span></div></pre></td></tr></table></figure>
<p>result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。<br>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，<em>而f2的存在依赖于f1，因此f1也始终在内存中</em>，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先<em>在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量</em>。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<h1 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h1><ol>
<li>由于闭包会使得函数中的变量被保存在内存中，内存消耗很大，不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄漏。解决方法是在退出函数之前，将不适用的局部变量全部删除。</li>
<li>闭包会在父函数外部改变父函数内部变量的值。如果把父函数当作对象使用，把闭包当作它的公用方法，把内部变量当作它的私有属性，<em>不要随便改变父函数内部变量的值</em>。<h1 id="闭包的缺点"><a href="#闭包的缺点" class="headerlink" title="闭包的缺点"></a>闭包的缺点</h1>闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄漏。</li>
</ol>
<p>可参考[<a href="http://www.cnblogs.com/wangfupeng1988/p/3994065.html" target="_blank" rel="external">http://www.cnblogs.com/wangfupeng1988/p/3994065.html</a>],<br>[<a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</a>]</p>
]]></content>
      
        <categories>
            
            <category> javascript语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构(javascrit)]]></title>
      <url>/2017/08/02/Data_Structure/</url>
      <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="1-线性表的定义"><a href="#1-线性表的定义" class="headerlink" title="1.线性表的定义"></a>1.线性表的定义</h2><p>  零个或多个数据元素的有限序列。</p>
<h2 id="2-线性表的分类"><a href="#2-线性表的分类" class="headerlink" title="2.线性表的分类"></a>2.线性表的分类</h2><ul>
<li><strong>线性表的顺序存储结构</strong>：指的是用一段地址连续的存储单元一次存储线性表的数据元素。</li>
<li><strong>线性表的链式存储结构</strong>：地址不一定连续来存储线性表的数据元素。</li>
</ul>
<h2 id="3-线性表的操作"><a href="#3-线性表的操作" class="headerlink" title="3.线性表的操作"></a>3.线性表的操作</h2><h3 id="3-1-顺序存储"><a href="#3-1-顺序存储" class="headerlink" title="3.1 顺序存储"></a>3.1 顺序存储</h3><h4 id="3-1-1-查找元素"><a href="#3-1-1-查找元素" class="headerlink" title="3.1.1 查找元素"></a>3.1.1 查找元素</h4><p>  时间复杂度O(1)</p>
<h4 id="3-1-2-插入操作"><a href="#3-1-2-插入操作" class="headerlink" title="3.1.2 插入操作"></a>3.1.2 插入操作</h4><p><strong>思路</strong></p>
<ul>
<li>如果插入位置不合理，抛出异常；</li>
<li>如果线性表长度大于等于数组长度，则抛出异常；</li>
<li>从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；</li>
<li>将要插入元素填入位置i处；</li>
<li>表长加1。<br>时间复杂度O(1).</li>
</ul>
<h4 id="3-1-3-删除操作"><a href="#3-1-3-删除操作" class="headerlink" title="3.1.3 删除操作"></a>3.1.3 删除操作</h4><p><strong>思路</strong></p>
<ul>
<li>如果删除位置不合理，抛出异常；</li>
<li>取出删除元素；</li>
<li>从删除元素的位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；</li>
<li>表长减1。<br>时间复杂度O(1).</li>
</ul>
<h3 id="3-2-链式存储"><a href="#3-2-链式存储" class="headerlink" title="3.2 链式存储"></a>3.2 链式存储</h3><h4 id="3-2-1-查找元素"><a href="#3-2-1-查找元素" class="headerlink" title="3.2.1 查找元素"></a>3.2.1 查找元素</h4><p><strong>思路</strong></p>
<ul>
<li>声明一个结点p指向链表第一个结点；</li>
<li>遍历链表，指针p向后移动；</li>
<li>若到链表结尾p为空，则说明第i个元素不存在；</li>
<li>否则查找成果，返回p结点。<br>最好时间复杂度O(1),最坏时间复杂度O(n).</li>
</ul>
<h4 id="3-2-2-插入元素"><a href="#3-2-2-插入元素" class="headerlink" title="3.2.2 插入元素"></a>3.2.2 插入元素</h4><p>标准代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s.next = p.next;</div><div class="line">p.next = s;</div></pre></td></tr></table></figure></p>
<h4 id="3-2-3-删除元素"><a href="#3-2-3-删除元素" class="headerlink" title="3.2.3 删除元素"></a>3.2.3 删除元素</h4><p>标准代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">q = p.next;</div><div class="line">p.next = q.next;</div></pre></td></tr></table></figure></p>
<h2 id="4-单链表结构与顺序存储结构的优缺点"><a href="#4-单链表结构与顺序存储结构的优缺点" class="headerlink" title="4.单链表结构与顺序存储结构的优缺点"></a>4.单链表结构与顺序存储结构的优缺点</h2><h3 id="4-1-时间性能"><a href="#4-1-时间性能" class="headerlink" title="4.1 时间性能"></a>4.1 时间性能</h3><ul>
<li>查找：顺序存储结构O(1),单链表O(n)</li>
<li>插入和删除：顺序存储结构平均时间复杂度O(n),单链表O(1)</li>
</ul>
<h3 id="4-2-空间性能"><a href="#4-2-空间性能" class="headerlink" title="4.2 空间性能"></a>4.2 空间性能</h3><p>  顺序存储结构需要预分配存储空间。单链表不需要分配存储空间。</p>
<h2 id="5-单链表的分类"><a href="#5-单链表的分类" class="headerlink" title="5.单链表的分类"></a>5.单链表的分类</h2><h3 id="5-1-静态链表"><a href="#5-1-静态链表" class="headerlink" title="5.1 静态链表"></a>5.1 静态链表</h3><p>  用数组描述的链表叫<strong>静态链表</strong>。</p>
<h3 id="5-2-循环链表"><a href="#5-2-循环链表" class="headerlink" title="5.2 循环链表"></a>5.2 循环链表</h3><p>  将单链表中终端结点的指针由空指针改为指向头结点，头尾相连的单链表称为<strong>单循环链表</strong>。</p>
<h3 id="5-3-双向链表"><a href="#5-3-双向链表" class="headerlink" title="5.3 双向链表"></a>5.3 双向链表</h3><p>  单循环链表增加一个指向前驱结点的指针。</p>
<ul>
<li><p>插入操作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s.prior = p;</div><div class="line">s.next = p.next;</div><div class="line">p.next.prior = s;</div><div class="line">p.next = s;</div></pre></td></tr></table></figure>
</li>
<li><p>删除操作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p.prior.next = p.next;</div><div class="line">p.next.prior = p.prior;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><ul>
<li><strong>栈</strong>：限定仅在表尾进行插入和删除操作的线性表（后进先出）</li>
<li><strong>队列</strong>：只允许在一端进行插入操作，而在另一端进行删除操作的线性表（先进先出）</li>
</ul>
<h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2.操作"></a>2.操作</h2><h3 id="2-1-栈"><a href="#2-1-栈" class="headerlink" title="2.1 栈"></a>2.1 栈</h3><p>进栈push()<br>出栈pop()</p>
<h2 id="3-分类"><a href="#3-分类" class="headerlink" title="3.分类"></a>3.分类</h2><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>队列满的条件是(rear+1)%QueueSize == front<br>队列长度公式是(rear-front+QueueSize)%QueueSize</p>
<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h2><p><strong>树</strong>：是n个结点的有限集</p>
<h2 id="2-相关概念"><a href="#2-相关概念" class="headerlink" title="2.相关概念"></a>2.相关概念</h2><p><strong>度</strong>：树的度是树内各结点的度的最大值。<br><strong>深度</strong>：树中结点的最大层次称为树的深度。</p>
<h2 id="3-树的存储结构"><a href="#3-树的存储结构" class="headerlink" title="3.树的存储结构"></a>3.树的存储结构</h2><ol>
<li>双亲表示法<br>data,parent</li>
<li>孩子表示法<br>data,parent,firstchild-child,next</li>
<li>孩子兄弟表示法<br>data,firstchild,rightsib</li>
</ol>
<h2 id="4-二叉树"><a href="#4-二叉树" class="headerlink" title="4.二叉树"></a>4.二叉树</h2><h3 id="4-1-特点"><a href="#4-1-特点" class="headerlink" title="4.1 特点"></a>4.1 特点</h3><ul>
<li>每个结点最多有两颗子树</li>
<li>左子树和右子树是有顺序的。</li>
</ul>
<h3 id="4-2-分类"><a href="#4-2-分类" class="headerlink" title="4.2 分类"></a>4.2 分类</h3><ol>
<li>满二叉树<br>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</li>
<li>完全二叉树<br>对一棵具有n个结点的二叉树按层序编号，如果编号为i的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。</li>
</ol>
<h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ol>
<li>在二叉树的第i层至多有2<sup>i-1</sup>个结点。</li>
<li>深度为k的二叉树至多有2<sup>k</sup>-1个结点。</li>
<li>对任何一棵二叉树T，如果其终端结点数为n<sub>0</sub>,度为2的结点数为n<sub>2</sub>,则n<sub>0</sub>=n<sub>2</sub>+1。(n=n<sub>0</sub>+n<sub>1</sub>+n<sub>2</sub>,分支数总数等于结点总数减1，分支总数=n-1=n<sub>1</sub>+2n<sub>2</sub>)</li>
<li>具有n个结点的完全二叉树的深度为[log<sub>2</sub>n]+1.</li>
<li>如果对一棵有n个结点的完全二叉树的结点按层序编号，对任一结点i有：<br>1.如果i=1,则结点i是二叉树的根，无双亲；如果i&gt;1,则其双亲是结点[i/2].<br>2.如果2i&gt;n,则结点i无左孩子；否则其左孩子是结点2i。<br>3.如果2i+1&gt;n,则结点i无右孩子；否则其右孩子是结点2i+1。</li>
</ol>
<h3 id="4-3-二叉树的存储结构"><a href="#4-3-二叉树的存储结构" class="headerlink" title="4.3 二叉树的存储结构"></a>4.3 二叉树的存储结构</h3><p>二叉链表： lchild,data,rchild</p>
<h3 id="4-4-基本操作"><a href="#4-4-基本操作" class="headerlink" title="4.4 基本操作"></a>4.4 基本操作</h3><h4 id="4-4-1-插入"><a href="#4-4-1-插入" class="headerlink" title="4.4.1 插入"></a>4.4.1 插入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  function TreeNode(x) &#123;</div><div class="line">    this.val = x;</div><div class="line">    this.left = null;</div><div class="line">    this.right = null;</div><div class="line">  &#125;</div><div class="line">  function BST() &#123;</div><div class="line">    this.root = null;</div><div class="line">    this.insert = insert;</div><div class="line">    this.inOrder = inOrder;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> TreeNode(data,<span class="literal">null</span>,<span class="literal">null</span>);</div><div class="line">    <span class="comment">//插入根结点</span></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>,root = n;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</div><div class="line">      <span class="keyword">let</span> parent;</div><div class="line">      <span class="keyword">while</span>(current) &#123;</div><div class="line">        parent = current;</div><div class="line">        <span class="keyword">if</span>(data&lt;current.data) &#123;</div><div class="line">          current = current.left;</div><div class="line">          <span class="keyword">if</span>(current == <span class="literal">null</span>) &#123;</div><div class="line">            parent.left = node;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          current = current.right;</div><div class="line">          <span class="keyword">if</span>(current == <span class="literal">null</span>) &#123;</div><div class="line">            parent.right = node;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="4-4-2-查找最小值（最大值）"><a href="#4-4-2-查找最小值（最大值）" class="headerlink" title="4.4.2 查找最小值（最大值）"></a>4.4.2 查找最小值（最大值）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMin</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</div><div class="line">  <span class="keyword">while</span>(!(current.left == <span class="literal">null</span>)) &#123;</div><div class="line">    current = current.left;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> current.data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-4-3-查找指定值"><a href="#4-4-3-查找指定值" class="headerlink" title="4.4.3 查找指定值"></a>4.4.3 查找指定值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</div><div class="line">  <span class="keyword">while</span>(current != <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">if</span>(current.data == data) &#123;</div><div class="line">      <span class="keyword">return</span> current;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data&lt; current.data) &#123;</div><div class="line">      current = current.left;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      current = current.right;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-4-4-删除结点"><a href="#4-4-4-删除结点" class="headerlink" title="4.4.4 删除结点"></a>4.4.4 删除结点</h4><p>  删除结点有三种情况：</p>
<ul>
<li>叶子结点，则父结点指向null</li>
<li>仅有左或右子树的结点，则原本指向它的结点就指向它的子结点</li>
<li>左右子树都有结点，则查找删除结点右结点上的最小值，将临时结点上的值复制到待删除结点，然后再删除临时结点。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  root = removeNode(<span class="keyword">this</span>.root,data);</div><div class="line">&#125;</div><div class="line"><span class="comment">//找到最小值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMin</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> node;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> getMin(node.left);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeNode</span>(<span class="params">node,data</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(node == <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(data == node.data) &#123;</div><div class="line">    <span class="comment">// 叶子结点</span></div><div class="line">    <span class="keyword">if</span>(node.left == <span class="literal">null</span> &amp;&amp; node.right ==<span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//没有左子结点的结点</span></div><div class="line">    <span class="keyword">if</span>(node.left == <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> node.right;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(node.right == <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> node.left;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 有2个子结点的结点</span></div><div class="line">    <span class="keyword">let</span> tempNode = getMin(node.right);</div><div class="line">    node.data = tempNode.data;</div><div class="line">    node.right = removeNode(node.right,tempNode.data);</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data&lt;node.data) &#123;</div><div class="line">    node.left = removeNode(node.left,data);</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    node.right = removeNode(node.right,data);</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-5-二叉树的遍历"><a href="#4-5-二叉树的遍历" class="headerlink" title="4.5 二叉树的遍历"></a>4.5 二叉树的遍历</h3><h4 id="4-5-1-前序遍历"><a href="#4-5-1-前序遍历" class="headerlink" title="4.5.1 前序遍历"></a>4.5.1 前序遍历</h4><p>  先访问根结点，然后前序遍历左子树，再前序遍历右子树。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  function TreeNode(x) &#123;</div><div class="line">    this.val = x;</div><div class="line">    this.left = null;</div><div class="line">    this.right = null;</div><div class="line">  &#125;</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PreOrderTraverse</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!(node == <span class="literal">null</span>)) &#123;</div><div class="line">    <span class="built_in">console</span>.log(node.data);</div><div class="line">    PreOrderTraverse(node.left);</div><div class="line">    PreOrderTraverse(node.right);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-5-2-中序遍历"><a href="#4-5-2-中序遍历" class="headerlink" title="4.5.2 中序遍历"></a>4.5.2 中序遍历</h4><p>  先中序遍历左子树，访问根结点，再中序遍历右子树。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  function TreeNode(x) &#123;</div><div class="line">    this.val = x;</div><div class="line">    this.left = null;</div><div class="line">    this.right = null;</div><div class="line">  &#125;</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">InOrderTraverse</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(!(node == <span class="literal">null</span>)) &#123;</div><div class="line">          InOrderTraverse(node.left);</div><div class="line">          <span class="built_in">console</span>.log(node.show());</div><div class="line">          InOrderTraverse(node.right);</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-5-3-后序遍历"><a href="#4-5-3-后序遍历" class="headerlink" title="4.5.3 后序遍历"></a>4.5.3 后序遍历</h4><p>  先后序遍历左右子树，再访问根结点。<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  function TreeNode(x) &#123;</div><div class="line">    this.val = x;</div><div class="line">    this.left = null;</div><div class="line">    this.right = null;</div><div class="line">  &#125;</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PostOrderTraverse</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(!(node == <span class="literal">null</span>)) &#123;</div><div class="line">          PostOrderTraverse(node.left);</div><div class="line">          <span class="built_in">console</span>.log(node.show());</div><div class="line">          PostOrderTraverse(node.right);</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-5-4-层序遍历"><a href="#4-5-4-层序遍历" class="headerlink" title="4.5.4 层序遍历"></a>4.5.4 层序遍历</h4><p>  从根结点开始访问，从上而下逐层遍历。</p>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法(javascript)]]></title>
      <url>/2017/07/21/Sort-Function/</url>
      <content type="html"><![CDATA[<h1 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	查找条件：排好序的数组</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarysearch</span>(<span class="params">arr, target</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(arr.length == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> low = <span class="number">0</span>;</div><div class="line">	<span class="keyword">let</span> high = arr.length;</div><div class="line">	<span class="keyword">let</span> mid;</div><div class="line">	<span class="keyword">while</span>(low &lt;= high) &#123;</div><div class="line">		mid = <span class="built_in">Math</span>.floor((high-low)/<span class="number">2</span>);</div><div class="line">		<span class="keyword">if</span>(target == arr[mid]) &#123;</div><div class="line">			<span class="keyword">return</span> mid;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; arr[mid]) &#123;</div><div class="line">			high = mid - <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			low = mid + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="1-冒泡排序法"><a href="#1-冒泡排序法" class="headerlink" title="1.冒泡排序法"></a>1.冒泡排序法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	从底层开始冒泡，两两比较，小的放在前面，直到小泡泡</div><div class="line">	当数据是正序的时候最快</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> len = arr.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;        <span class="comment">//相邻元素两两对比</span></div><div class="line">                <span class="keyword">var</span> temp = arr[j+<span class="number">1</span>];        <span class="comment">//元素交换</span></div><div class="line">                arr[j+<span class="number">1</span>] = arr[j];</div><div class="line">                arr[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	选择最小的元素放在前面，无论什么数据，</div><div class="line">	放进去时间复杂度都是O(n&lt;sup&gt;2&lt;/sup&gt;),好处是不需要额外内存空间</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">	<span class="keyword">const</span> len = arr.length;</div><div class="line">	<span class="keyword">let</span> minIndex ,temp;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>;i++) &#123;</div><div class="line">		minIndex  = i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line">			<span class="keyword">if</span>(arr[j]&lt;arr[minIndex]) &#123;	<span class="comment">//寻找最小的数</span></div><div class="line">				minIndex = j; <span class="comment">// 保存最小数的索引值</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		temp = arr[i];</div><div class="line">		arr[i] = arr[minIndex];</div><div class="line">		arr[minIndex] = temp;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3-插入排序法"><a href="#3-插入排序法" class="headerlink" title="3.插入排序法"></a>3.插入排序法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">1.默认第一个已经排好序</div><div class="line">2.依次将接下来的数与数组里的每个元素进行比较，若比前一个小</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">InsertSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line"> 	<span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</div><div class="line"> 	  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> 	&#125;</div><div class="line">   <span class="keyword">let</span> temp = <span class="number">0</span>;   <span class="comment">// 存放当前元素</span></div><div class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</div><div class="line">     <span class="keyword">if</span>(arr[i] &lt; arr[i<span class="number">-1</span>]) &#123;</div><div class="line">       temp = arr[i];</div><div class="line">       <span class="keyword">let</span> pre = i - <span class="number">1</span>;</div><div class="line"></div><div class="line">       <span class="keyword">while</span>(pre &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[pre]) &#123;</div><div class="line">         arr[pre+<span class="number">1</span>] = arr[pre];</div><div class="line">         pre--;</div><div class="line">       &#125;</div><div class="line">       arr[pre+<span class="number">1</span>] = temp;</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4.快速排序"></a>4.快速排序</h1><p><strong>基本思想</strong>: 通过一趟排序将待排记录分割成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序的目的。<br>    1.在数据集之中，选择一个元素作为”基准”（pivot）。<br>    2.所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。<br>    3.对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* 它是由冒泡排序改进而来的。在待排序的n个记录中任取一个记录，把该记录放在合适的位置后，</div><div class="line">* 数据序列被此记录划分为两部分。所有关键字比该记录关键字小的记录放在前一部分，</div><div class="line">* 所有比它大的记录放置在后一部分，并把该记录排在这两部分的中间。</div><div class="line">*/</div><div class="line">	<span class="comment">//交换函数</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">	　　<span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</div><div class="line">	　　<span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>); <span class="comment">//选择“基准”的索引值</span></div><div class="line">	　　<span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];	<span class="comment">// 基准</span></div><div class="line">	　　<span class="keyword">var</span> left = [];</div><div class="line">	　　<span class="keyword">var</span> right = [];</div><div class="line">	　　<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">	　　　　<span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</div><div class="line">	　　　　　　left.push(arr[i]);</div><div class="line">	　　　　&#125; <span class="keyword">else</span> &#123;</div><div class="line">	　　　　　　right.push(arr[i]);</div><div class="line">	　　　　&#125;</div><div class="line">	　　&#125;</div><div class="line">	　　<span class="keyword">return</span> quickSort(left).concat(pivot, quickSort(right));</div><div class="line">	&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5.归并排序"></a>5.归并排序</h1><p><strong>思想</strong>：两两进行比较，再归并。<br>    归并排序的性能不受输入数据的影响，始终是O(nlogn)，代价是需要额外内存空间。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">	<span class="keyword">const</span> len = arr.length;</div><div class="line">	<span class="keyword">if</span>(len&lt;<span class="number">2</span>) &#123;</div><div class="line">		<span class="keyword">return</span> arr;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor(len/<span class="number">2</span>);</div><div class="line">	<span class="keyword">let</span> left = arr.slice(<span class="number">0</span>,middle);</div><div class="line">	<span class="keyword">let</span> right = arr.slice(middle);</div><div class="line">	<span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left,right</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> result = []</div><div class="line">	<span class="keyword">while</span>(left.length&gt;<span class="number">0</span> &amp;&amp; right.length&gt;<span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">if</span>(left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</div><div class="line">			result.push(left.shift());</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			result.push(right.shift());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (left.length) &#123;</div><div class="line">		result.push(left.shift());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span>(right.length) &#123;</div><div class="line">		result.push(right.shift());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6.堆排序"></a>6.堆排序</h1><p><strong>思想</strong>：堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：<br>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列<br>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列<br>一般用数组来表示堆，i结点的父结点下标为(i-1)/2，它的左右子结点下标分别为2i+1和2*i+2。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">	 <span class="comment">// 交换函数</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">array, i, j</span>) </span>&#123;</div><div class="line">	  <span class="keyword">var</span> temp = array[i];</div><div class="line">	  array[i] = array[j];</div><div class="line">	  array[j] = temp;</div><div class="line">	 &#125;</div><div class="line">	 <span class="comment">// 最大堆调整</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">maxHeapify</span>(<span class="params">array, index, heapSize</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> iMax,</div><div class="line">	   		iLeft,</div><div class="line">	   		iRight;</div><div class="line">		<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">			iMax = index;</div><div class="line">			iLeft = <span class="number">2</span> * index + <span class="number">1</span>;</div><div class="line">			iRight = <span class="number">2</span> * (index + <span class="number">1</span>);</div><div class="line">			<span class="comment">// 以下两个if语句是找到左右孩子和父结点中最大值的索引</span></div><div class="line">			<span class="keyword">if</span> (iLeft &lt; heapSize &amp;&amp; array[index] &lt; array[iLeft]) &#123;</div><div class="line">				iMax = iLeft; <span class="comment">//如果父结点小于左孩子，则将子结点的索引赋给iMax</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (iRight &lt; heapSize &amp;&amp; array[iMax] &lt; array[iRight]) &#123;</div><div class="line">				iMax = iRight;	<span class="comment">// 如果索引为iMax的元素小于右孩子，则孩子中最大的是右孩子</span></div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 如果最大值不是父结点，则交换父结点与孩子结点</span></div><div class="line">			<span class="keyword">if</span> (iMax != index) &#123;</div><div class="line">				swap(array, iMax, index);</div><div class="line">				index = iMax;<span class="comment">//递归父亲结点</span></div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">			  <span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	 <span class="comment">// 建立最大堆</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">buildMaxHeap</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> i,</div><div class="line">				iParent = <span class="built_in">Math</span>.floor(array.length / <span class="number">2</span>) - <span class="number">1</span>;</div><div class="line">		<span class="comment">// 从最下层有孩子的结点开始，遍历每个有孩子的结点</span></div><div class="line">		<span class="keyword">for</span> (i = iParent; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">			maxHeapify(array, i, array.length);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 排序</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">		buildMaxHeap(array);</div><div class="line">		<span class="comment">/*</span></div><div class="line">			建立好最大堆之后</div><div class="line">			1.将第一个元素和最后一个元素交换位置，则最大值就放在数组的最后</div><div class="line">			2.小值跑到根节点，再重新调整最大堆，并将堆的长度减1</div><div class="line">		*/</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i = array.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">			swap(array, <span class="number">0</span>, i);</div><div class="line">			maxHeapify(array, <span class="number">0</span>, i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> array;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> sort(array);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><table>
<thead>
<tr>
<th>排序方法</th>
<th>平均情况</th>
<th>最好情况</th>
<th>最坏情况</th>
<th>稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td>冒泡排序</td>
<td>O(n<sup>2</sup>)</td>
<td>O(n)</td>
<td>O(n<sup>2</sup>)</td>
<td>稳定</td>
</tr>
<tr>
<td>选择排序</td>
<td>O(n<sup>2</sup>)</td>
<td>O(n<sup>2</sup>)</td>
<td>O(n<sup>2</sup>)</td>
<td>稳定</td>
</tr>
<tr>
<td>插入排序</td>
<td>O(n<sup>2</sup>)</td>
<td>O(n)</td>
<td>O(n<sup>2</sup>)</td>
<td>稳定</td>
</tr>
<tr>
<td>归并排序</td>
<td>O(nlogn)</td>
<td>O(nlogn)</td>
<td>O(nlogn)</td>
<td>稳定</td>
</tr>
<tr>
<td>快速排序</td>
<td>O(nlogn)</td>
<td>O(nlogn)</td>
<td>O(n<sup>2</sup>)</td>
<td>不稳定</td>
</tr>
<tr>
<td>堆排序</td>
<td>O(nlogn)</td>
<td>O(nlogn)</td>
<td>O(nlogn)</td>
<td>稳定</td>
</tr>
</tbody>
</table>
<p>可参考<a href="http://www.cnblogs.com/dushao/p/6004883.html" target="_blank" rel="external">http://www.cnblogs.com/dushao/p/6004883.html</a></p>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
